<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[宅基地]]></title>
  <subtitle><![CDATA[技术人生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhaijd.github.io/"/>
  <updated>2014-04-16T08:21:19.492Z</updated>
  <id>http://zhaijd.github.io/</id>
  
  <author>
    <name><![CDATA[Winters]]></name>
    <email><![CDATA[suyuan19@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[java常用集合的数据结构]]></title>
    <link href="http://zhaijd.github.io/2014/04/16/java%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88/"/>
    <id>http://zhaijd.github.io/2014/04/16/java常用集合/</id>
    <published>2014-04-16T07:47:58.000Z</published>
    <updated>2014-04-16T08:18:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-hashmap">1. HashMap</h3>
<h4 id="1-1-hashmap-">1.1 HashMap 的数据结构</h4>
<p>HashMap 是一个链表对象的数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Entity&lt;K,V&gt;[] table;

Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) {
            value = v;
            next = n;
            key = k;
            hash = h;
}
</pre></td></tr></table></figure>

<h4 id="1-2-hashmap-">1.2 HashMap 初始化大小</h4>
<p>在HashMap 除提供了默认的构造方法外，还提供了两个带参数的构造方法。</p>
<p>HashMap 中存在几个重要的概念</p>
<ul>
<li>最大容量</li>
<li>初始大小 默认 16</li>
<li>扩容因子 默认 0.75</li>
</ul>
<p>其中最大容量 MAXIMUM_CAPACITY = 1&lt;&lt;30 .而剩下的两个变量是允许我们自己定义的。</p>
<p>即我们可以在使用HashMap另外两个构造方法进行指定。</p>
<p>其中，HashMap的初始大小不是说我们指定了多少就是默认多少的,下段代码摘自 HashMap 的构造方法，通过下列代码 可知 HashMap的 初始大小一定为 [指定大小]=&lt; Min(2^n) 。
即，即使是  HashMap map = new HashMap(10); 则HashMap的初始化大小依旧为16.
为什么呢？这个与HashMap 的 Hash 算法 位运算有关系。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">int</span> capacity = <span class="number">1</span>;
<span class="keyword">while</span> (capacity &lt; initialCapacity)
    capacity &lt;&lt;= <span class="number">1</span>;
</pre></td></tr></table></figure>

<h4 id="1-3-hashmap-">1.3 HashMap 扩容</h4>
<p>当HashMap的空间使用率 &gt;= (int)capacity * 扩容因子 时会进行扩容，扩容方式为将原来的空间大小 扩展2倍。扩容检查会在put 方法结束时进行。扩容后需要进行rehash运算。所谓的rehash 运算 即是重新散列,会重新调整Entity在数组中的下标位置。</p>
]]></content>
    
    
      <category term="java" scheme="http://zhaijd.github.io/tags/java/"/>
    
      <category term="技术" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dubbo服务化过程中可能存在的坑]]></title>
    <link href="http://zhaijd.github.io/2014/03/26/dubbo_attention_list/"/>
    <id>http://zhaijd.github.io/2014/03/26/dubbo_attention_list/</id>
    <published>2014-03-26T06:49:51.000Z</published>
    <updated>2014-03-28T09:40:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-version-">1.version 设置</h3>
<p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p>
<ul>
<li>在低压力时间段，先升级一半提供者为新版本</li>
<li>再将所有消费者升级为新版本</li>
<li>然后将剩下的一半提供者升级为新版本</li>
</ul>
<a id="more"></a>

<p>配置例子:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dubbo:service</span> <span class="attribute">interface</span>=<span class="value">"com.foo.BarService"</span> <span class="attribute">version</span>=<span class="value">"1.0.0"</span> /&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:service</span> <span class="attribute">interface</span>=<span class="value">"com.foo.BarService"</span> <span class="attribute">version</span>=<span class="value">"2.0.0"</span> /&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">id</span>=<span class="value">"barService"</span> <span class="attribute">interface</span>=<span class="value">"com.foo.BarService"</span> <span class="attribute">version</span>=<span class="value">"1.0.0"</span> /&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">id</span>=<span class="value">"barService"</span> <span class="attribute">interface</span>=<span class="value">"com.foo.BarService"</span> <span class="attribute">version</span>=<span class="value">"2.0.0"</span> /&gt;</span>
</pre></td></tr></table></figure>

<blockquote>
<p><strong>风险：</strong>接口不兼容升级时，如果忘记升级版本号，发布Provider过程中，未升级的Consumer会调用已经升级的Provider服务接口，从而导致异常的出现。</p>
</blockquote>
<h3 id="2-timeout-retries-loadbalance-actives-">2.timeout 、retries、loadbalance、actives 配置</h3>
<blockquote>
<p>只有group，interface，version是服务的匹配条件，三者决定是不是同一个服务，其它配置项均为调优和治理参数。
所有配置项分为三大类，参见下表中的&quot;作用&quot;一列。</p>
<ul>
<li>服务发现：表示该配置项用于服务的注册与发现，目的是让消费方找到提供方。</li>
<li>服务治理：表示该配置项用于治理服务间的关系，或为开发测试提供便利条件。</li>
<li>性能调优：表示该配置项用于调优性能，不同的选项对性能会产生影响。</li>
</ul>
</blockquote>
<p>1.<strong>timeout:</strong>方法调用超时, 默认值为5000(毫秒)</p>
<p>2.<strong>retries:</strong>失败重试次数，缺省是2（表示加上第一次调用，会调用3次）</p>
<p>3.<strong>loadbalance:</strong>负载均衡算法（有多个Provider时，如何挑选Provider调用）</p>
<ul>
<li>缺省是随机（<strong>random</strong>）</li>
</ul>
<blockquote>
<p>如果只有两个Provider时，其实是轮询的方式的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>    <span class="keyword">if</span> (invokers.size() == <span class="number">1</span>)
    <span class="keyword">return</span> invokers.get(<span class="number">0</span>);
    <span class="comment">// 如果只有两个invoker，退化成轮循</span>
    <span class="keyword">if</span> (invokers.size() == <span class="number">2</span> && selected != <span class="keyword">null</span> && selected.size() &gt; <span class="number">0</span>) {
        <span class="keyword">return</span> selected.get(<span class="number">0</span>) == invokers.get(<span class="number">0</span>) ? invokers.get(<span class="number">1</span>) : invokers.get(<span class="number">0</span>);
    }
</pre></td></tr></table></figure>

<ul>
<li>还可以有轮训(<strong>roundrobin</strong>)、</li>
<li>最不活跃优先（<strong>leastactive</strong>，指从Consumer端并发调用最好的Provider，可以减少的反应慢的Provider的调用，因为反应慢更容易累积并发的调用）</li>
</ul>
<blockquote>
<p>该选择算法逻辑：</p>
</blockquote>
<p>1.被调用数最小的provider只有一个，直接返回。
2.当被调用数最小的Provider存在多个，根据总权重进行随机调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">int</span> offsetWeight = random.nextInt(totalWeight);
<span class="comment">// 并确定随机值落在哪个片断上</span>
<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leastCount; i++) {
    <span class="keyword">int</span> leastIndex = leastIndexs[i];
    offsetWeight -= getWeight(invokers.get(leastIndex), invocation);
    <span class="keyword">if</span> (offsetWeight &lt;= <span class="number">0</span>)
        <span class="keyword">return</span> invokers.get(leastIndex);
}
</pre></td></tr></table></figure>

<p>3.最后是按照随机进行调用。</p>
<p>4.<strong>actives</strong>，消费者端，最大并发调用限制,即当Consumer对一个服务的并发调用到上限后，新调用会Wait直到超时。
在方法上配置（dubbo:method）则并发限制针对方法，在接口上配置（dubbo:service），则并发限制针对服务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>com.alibaba.dubbo.rpc.filter.ActiveLimitFilter
</pre></td></tr></table></figure>

<h3 id="3-">3.启动时检查</h3>
<p>Dubbo缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止Spring初始化完成，以便上线时，能及早发现问题，默认check=true。</p>
<blockquote>
<p><strong>风险:</strong>如果你的Spring容器是懒加载的，或者通过API编程延迟引用服务，请关闭check，否则服务临时不可用时，会抛出异常，拿到null引用，如果check=false，总是会返回引用，当服务恢复时，能自动连上。</p>
</blockquote>
<p>可以通过<code>check=&quot;false&quot;</code>关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p>
<p>关闭某个服务的启动时检查：(没有提供者时报错)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">interface</span>=<span class="value">"com.foo.BarService"</span> <span class="attribute">check</span>=<span class="value">"false"</span> /&gt;</span>
</pre></td></tr></table></figure>

<p>关闭所有服务的启动时检查：(没有提供者时报错)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dubbo:consumer</span> <span class="attribute">check</span>=<span class="value">"false"</span> /&gt;</span>
</pre></td></tr></table></figure>

<p>关闭注册中心启动时检查：(注册订阅失败时报错)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dubbo:registry</span> <span class="attribute">check</span>=<span class="value">"false"</span> /&gt;</span>
</pre></td></tr></table></figure>

<h3 id="4-">4.集群容错模式化的选择</h3>
<p>集群容错模式：</p>
<ul>
<li>failover (缺省)<ul>
<li>失败自动切换，当出现失败，重试其它服务器。
通常用于读操作，但重试会带来更长延迟。
可通过retries=&quot;2&quot;来设置重试次数(不含第一次)。</li>
</ul>
</li>
<li>failfast<ul>
<li>快速失败，只发起一次调用，失败立即报错。
通常用于非幂等性的写操作，比如新增记录。</li>
</ul>
</li>
<li>failsafe<ul>
<li>失败安全，出现异常时，直接忽略。
通常用于写入审计日志等操作。</li>
</ul>
</li>
<li>failback<ul>
<li>失败自动恢复，后台记录失败请求，定时重发。
通常用于消息通知操作。</li>
</ul>
</li>
<li>forking<ul>
<li>并行调用多个服务器，只要一个成功即返回。
通常用于实时性要求较高的读操作，但需要浪费更多服务资源。
可通过forks=&quot;2&quot;来设置最大并行数。</li>
</ul>
</li>
<li>broadcast (2.1.0开始支持)<ul>
<li>广播调用所有提供者，逐个调用，时间较长。
通常用于通知所有提供者更新缓存或日志等本地资源信息。</li>
</ul>
</li>
</ul>
<p>集群模式的设置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dubbo:service</span>  <span class="attribute">cluster</span>=<span class="value">“failover”</span>&gt;</span> 
<span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">cluster</span>=<span class="value">“failover”</span>&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:consumercluster=“failover”</span>&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:provider</span> <span class="attribute">cluster</span>=<span class="value">“failover”</span>&gt;</span>
</pre></td></tr></table></figure>

<p>可选：failover（默认）/failfast/failsafe/failback/forking</p>
<h3 id="5-">5.服务延时暴漏</h3>
<p>delay的默认值为0，表示立即暴露服务。<code>必需设置为-1</code>，延迟到Spring初始化完成后，再暴露服务。
如果你的服务需要Warmup时间，比如初始化缓存，等待相关资源就位等，可以使用delay进行延迟暴露。</p>
<p><strong>Dubbo官方文档建议：</strong></p>
<blockquote>
<ol>
<li>强烈建议不要在服务的实现类中有applicationContext.getBean()的调用，全部采用IoC注入的方式使用Spring的Bean。</li>
<li>如果实在要调getBean()，可以将Dubbo的配置放在Spring的最后加载。</li>
<li>如果不想依赖配置顺序，可以使用<dubbo:provider deplay=”-1” />，使Dubbo在Spring容器初始化完后，再暴露服务。</li>
<li>如果大量使用getBean()，相当于已经把Spring退化为工厂模式在用，可以将Dubbo的服务隔离单独的Spring容器。</li>
</ol>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dubbo:service</span> <span class="attribute">delay</span>=<span class="value">"5000"</span> /&gt;</span> <span class="comment">&lt;!-- 延迟5秒暴露服务 --&gt;</span>
<span class="tag">&lt;<span class="title">dubbo:service</span> <span class="attribute">delay</span>=<span class="value">"-1"</span> /&gt;</span> <span class="comment">&lt;!-- 延迟到Spring初始化完成后，再暴露服务 --&gt;</span>
</pre></td></tr></table></figure>

<h3 id="6-profiles-">6.profiles 配置</h3>
<p>我们的环境分为：</p>
<ul>
<li>dev：</li>
<li>beta:<ul>
<li>beta1</li>
<li>beta2</li>
<li>beta3</li>
<li>...</li>
</ul>
</li>
<li>product:<ul>
<li>product1</li>
<li>product2</li>
<li>...</li>
</ul>
</li>
</ul>
<p>开发过程中使用的是dev，如果对配置文件修改时忘记修改了 product profile ，则可能导致错误。</p>
<h3 id="7-">7.大数据传输</h3>
<p>Dubbo缺省协议采用单一长连接和NIO异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。传入传出参数数据包较小（建议小于100K），消费者比提供者个数多，单一消费者无法压满提供者，<code>尽量不要用dubbo协议传输大文件或超大字符串</code>。</p>
<p>Dubbo缺省协议不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p>
<h3 id="8-">8.序列化约束</h3>
<p>缺省协议，使用基于mina1.1.7+hessian3.2.1的tbremoting交互。</p>
<ul>
<li>参数及返回值需实现Serializable接口</li>
<li>参数及返回值不能自定义实现List, Map, Number, Date, Calendar等接口，只能用JDK自带的实现，因为hessian会做特殊处理，自定义实现类中的属性值都会丢失。</li>
<li>Hessian序列化，只传成员属性值和值的类型，不传方法或静态变量.</li>
<li>服务参数及返回值都必需是<code>byValue</code>的，而不能是<code>byRef</code>的，消费方和提供方的参数或返回值引用并不是同一个，只是值相同，Dubbo不支持引用远程对象。</li>
<li>服务提供方不应将DAO或SQL等异常抛给消费方，应在服务实现中对消费方不关心的异常进行包装，否则可能出现消费方无法反序列化相应异常。</li>
</ul>
<h3 id="9-">9. 枚举值</h3>
<ul>
<li>如果是完备集，可以用Enum，比如：ENABLE, DISABLE。</li>
<li>如果是业务种类，以后明显会有类型增加，不建议用Enum，可以用String代替。</li>
<li>如果是在返回值中用了Enum，并新增了Enum值，建议先升级服务消费方，这样服务提供方不会返回新值。</li>
<li>如果是在传入参数中用了Enum，并新增了Enum值，建议先升级服务提供方，这样服务消费方不会传入新值。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h3 id="1-version-">1.version 设置</h3>
<p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p>
<ul>
<li>在低压力时间段，先升级一半提供者为新版本</li>
<li>再将所有消费者升级为新版本</li>
<li>然后将剩下的一半提供者升级为新版本</li>
</ul>
]]></summary>
    
      <category term="dubbo" scheme="http://zhaijd.github.io/tags/dubbo/"/>
    
      <category term="技术杂项" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac OSX下tree命令]]></title>
    <link href="http://zhaijd.github.io/2014/03/25/mac%20tree%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhaijd.github.io/2014/03/25/mac tree命令/</id>
    <published>2014-03-25T12:05:33.000Z</published>
    <updated>2014-03-25T12:08:11.000Z</updated>
    <content type="html"><![CDATA[<p>在Mac OSX 系统默认是没有类似windows中的tree命令，找到一条比较有意思的命令可以实现：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>find <span class="built_in">.</span> <span class="attribute">-print</span> <span class="subst">|</span> sed <span class="attribute">-e</span> <span class="string">'s;[^/]*/;|____;g;s;____|; |;g'</span>
</pre></td></tr></table></figure>

<p>命令执行后的效果如下：
.
|<strong><strong>.classpath
|</strong></strong>.project
|<strong><strong>bin
| |</strong></strong>com
| | |<strong><strong>micmiu
| |</strong></strong>simple.idl
|<strong><strong>src
| |</strong></strong>com
| | |<strong><strong>micmiu
| |</strong></strong>simple.idl</p>
<p>为了方便使用，写一个alias 到<code>~/.profile</code>里:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">alias</span> tree=<span class="string">"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="mac shell" scheme="http://zhaijd.github.io/tags/mac%20shell/"/>
    
      <category term="技术杂项" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK源码阅读 - List.subList(int from , int to)]]></title>
    <link href="http://zhaijd.github.io/2014/03/21/List.subList/"/>
    <id>http://zhaijd.github.io/2014/03/21/List.subList/</id>
    <published>2014-03-21T03:11:51.000Z</published>
    <updated>2014-03-21T03:24:19.000Z</updated>
    <content type="html"><![CDATA[<p>List.subList(int from , int to) 返回的是一个SubList对象，该对象其实持有的还是源对象本身，只是在进行add ，remove时进行坐标偏移进行操作。也就是说对SubList对象的任何操作都会影响原来的List。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span>(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) {
        <span class="keyword">return</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> RandomAccess ?
                <span class="keyword">new</span> RandomAccessSubList&lt;E&gt;(<span class="keyword">this</span>, fromIndex, toIndex) :
                <span class="keyword">new</span> SubList&lt;E&gt;(<span class="keyword">this</span>, fromIndex, toIndex));
    }
</pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>class SubList&lt;E&gt; extends AbstractList&lt;E&gt; {
    <span class="keyword">private</span> AbstractList&lt;E&gt; l;
    <span class="keyword">private</span> <span class="keyword">int</span> offset;
    <span class="keyword">private</span> <span class="keyword">int</span> size;
    <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount;

    SubList(AbstractList&lt;E&gt; list, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) {
        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)
            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);
        <span class="keyword">if</span> (toIndex &gt; list.size())
            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);
        <span class="keyword">if</span> (fromIndex &gt; toIndex)
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +
                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);
        l = list;
        offset = fromIndex;
        size = toIndex - fromIndex;
        expectedModCount = l.modCount;
    }
</pre></td></tr></table></figure>

<p>推荐的做法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre> List&lt;Integer&gt; nlist = Lists.newArrayList(list.subList(<span class="number">0</span>,<span class="number">5</span>));
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="jdk" scheme="http://zhaijd.github.io/tags/jdk/"/>
    
      <category term="技术" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Multicast]]></title>
    <link href="http://zhaijd.github.io/2014/03/20/multicast/"/>
    <id>http://zhaijd.github.io/2014/03/20/multicast/</id>
    <published>2014-03-20T14:06:10.000Z</published>
    <updated>2014-03-20T14:10:29.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    
    
      <category term="网络技术" scheme="http://zhaijd.github.io/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HttpClient解析]]></title>
    <link href="http://zhaijd.github.io/2014/03/20/httpClinet/"/>
    <id>http://zhaijd.github.io/2014/03/20/httpClinet/</id>
    <published>2014-03-20T10:21:43.000Z</published>
    <updated>2014-03-30T06:25:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-httpentity-close-">1. HttpEntity 对象需要close 操作</h3>
<p>调用结束后需要关闭请求，可以使用<code>EntityUtils.consume(entity);</code> 关闭请求流。
实现原理：调用后当发现HttpEntity 中 InputStream 不为空，则对其进行关闭，关闭逻辑为，自旋循环，将InpuntStream中的数据读取扔掉，直至读取完毕。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consume</span>(<span class="keyword">final</span> HttpEntity entity) <span class="keyword">throws</span> IOException {
        <span class="keyword">if</span> (entity == <span class="keyword">null</span>) {
            <span class="keyword">return</span>;
        }
        <span class="keyword">if</span> (entity.isStreaming()) {
            InputStream instream = entity.getContent();
            <span class="keyword">if</span> (instream != <span class="keyword">null</span>) {
                instream.close();
            }
        }
    }

<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span>() <span class="keyword">throws</span> IOException {
    <span class="keyword">if</span> (!closed) {
        <span class="keyword">try</span> {
            <span class="keyword">if</span> (!eof) {
                <span class="comment">// read and discard the remainder of the message</span>
                <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];
                <span class="keyword">while</span> (read(buffer) &gt;= <span class="number">0</span>) {  <span class="comment">//自旋读取，并且丢弃掉了。</span>
                }
            }
        } <span class="keyword">finally</span> {
            eof = <span class="keyword">true</span>;
            closed = <span class="keyword">true</span>;
        }
    }
}
</pre></td></tr></table></figure>

<h3 id="2-httpclinet-threadsafeclientconnmanager-">2.HttpClinet ThreadSafeClientConnManager 结构图</h3>
<p><img src="/images/httpclient-01.png" alt="ThreadSafeClientConnManager 结构图"></p>
<h3 id="3-connperroutebean-">3.ConnPerRouteBean 解析</h3>
<p>该对象维护了一个基于 <code>HTTP Host</code> 的Map，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;HttpRoute, Integer&gt; maxPerHostMap;
</pre></td></tr></table></figure>

<p>该Map记录每个域名允许的最大连接数。该对象结合 ClientConnectionManager 对象可以对每个 http域名 进行细粒度的管理。默认的每个HttpRoute 两个连接。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="javadoc">/** The default maximum number of connections allowed per host */</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX_CONNECTIONS_PER_ROUTE = <span class="number">2</span>;   <span class="comment">// Per RFC 2616 sec 8.1.4</span>
</pre></td></tr></table></figure>

<h3 id="4-basicpoolentry">4.BasicPoolEntry</h3>
<p>基本的连接池对象定义，定义了连接池对象的基本属性。</p>
<h3 id="5-clientconnectionoperator">5.ClientConnectionOperator</h3>
<p>该接口定义了 http 连接中的操作，包括 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>OperatedClientConnection createConnection();

<span class="keyword">void</span> openConnection(OperatedClientConnection conn, HttpHost target, 
InetAddress local, HttpContext context, HttpParams params) <span class="keyword">throws</span> IOException; 

<span class="javadoc">/**
* Updates a connection with a layered secure connection.
* The typical use of this method is to update a tunnelled plain
* connection (HTTP) to a secure TLS/SSL connection (HTTPS).
**/</span>

<span class="keyword">void</span> updateSecureConnection(OperatedClientConnection conn, HttpHost target, 
HttpContext context, HttpParams params) <span class="keyword">throws</span> IOException;
</pre></td></tr></table></figure>

<h3 id="5-operatedclientconnection-">5.OperatedClientConnection 接口</h3>
<p>DefaultClientConnection 接口的一个实现类。</p>
<h3 id="6-routespecificpool">6.RouteSpecificPool</h3>
<p>基于一个域名的一个连接池。该对象定义了一个域名最大的连接数，可用连接数，等待的线程数。</p>
<h3 id="7-connpoolbyroute">7.ConnPoolByRoute</h3>
<p>是所有域名的总的连接池集合。即 是 RouteSpecificPool的集合。维护了一个map ，key为HttpRoute,  value: RouteSpecificPool</p>
]]></content>
    
    
      <category term="HttpClinet" scheme="http://zhaijd.github.io/tags/HttpClinet/"/>
    
      <category term="技术" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MAC Idea 引用java文档和java Src的方法]]></title>
    <link href="http://zhaijd.github.io/2014/03/19/idea_java/"/>
    <id>http://zhaijd.github.io/2014/03/19/idea_java/</id>
    <published>2014-03-19T11:16:38.000Z</published>
    <updated>2014-03-19T11:30:03.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>在Mac上的Java默认是没有帮助文档和源代码的。</p>
</blockquote>
<ol>
<li>到官网上下载 JDK Documentation and Source Code</li>
<li>放到
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/docs.zip
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/src.zip</li>
<li>在IntelliJ Idea的File-&gt;Project Structure...-&gt;SDKs:
把src.zip添加到Sourcepath
把docs.zip添加到Documentation Paths</li>
</ol>
]]></content>
    
    
      <category term="idea" scheme="http://zhaijd.github.io/tags/idea/"/>
    
      <category term="技术杂项" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[logback helper]]></title>
    <link href="http://zhaijd.github.io/2014/03/19/logback/"/>
    <id>http://zhaijd.github.io/2014/03/19/logback/</id>
    <published>2014-03-19T10:53:39.000Z</published>
    <updated>2014-03-19T11:09:26.000Z</updated>
    <content type="html"><![CDATA[<h4 id="1-">1. 引入下列的依赖项</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre> &lt;dependency&gt;
            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
            &lt;version&gt;1.0.13&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.6&lt;/version&gt;
        &lt;/dependency&gt;
</pre></td></tr></table></figure>

<h4 id="2-logback-">2. logback 配置文件示例</h4>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="title">appender</span> <span class="attribute">name</span>=<span class="value">"Console"</span> <span class="attribute">class</span>=<span class="value">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">encoder</span>&gt;</span>
            <span class="tag">&lt;<span class="title">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %c{0}:%L [%.11t] [%X{domain}] - %m%n<span class="tag">&lt;/<span class="title">pattern</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">encoder</span>&gt;</span>
        <span class="tag">&lt;<span class="title">filter</span> <span class="attribute">class</span>=<span class="value">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="title">level</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">appender</span>&gt;</span>
    <span class="tag">&lt;<span class="title">appender</span> <span class="attribute">name</span>=<span class="value">"velocity"</span> <span class="attribute">class</span>=<span class="value">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">rollingPolicy</span> <span class="attribute">class</span>=<span class="value">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">FileNamePattern</span>&gt;</span>${catalina.base}/logs/opb.velocity.%d{yyyy-MM-dd-HH}.log<span class="tag">&lt;/<span class="title">FileNamePattern</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">rollingPolicy</span>&gt;</span>
        <span class="tag">&lt;<span class="title">layout</span> <span class="attribute">class</span>=<span class="value">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %c{0}:%L [%.11t] [%X{domain}] - %m%n<span class="tag">&lt;/<span class="title">pattern</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">layout</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">appender</span>&gt;</span>
    <span class="tag">&lt;<span class="title">root</span> <span class="attribute">level</span>=<span class="value">"INFO"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">appender-ref</span> <span class="attribute">ref</span>=<span class="value">"Console"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">root</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</pre></td></tr></table></figure>

<h4 id="3-java-">3.java代码示例</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">import</span> org.slf4j.Logger;
<span class="keyword">import</span> org.slf4j.LoggerFactory;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSlf4jLoger</span> {</span>

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        Logger log = LoggerFactory.getLogger(TestSlf4jLoger.class);
        <span class="keyword">try</span>{
            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"test"</span>);
        }<span class="keyword">catch</span> (Exception e){
            log.warn(<span class="string">"test{},{}"</span>,<span class="string">"a"</span>,<span class="string">"B"</span>,e);
        }
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="logback" scheme="http://zhaijd.github.io/tags/logback/"/>
    
      <category term="技术杂项" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CaminteJS helper]]></title>
    <link href="http://zhaijd.github.io/2014/03/19/CaminteJS/"/>
    <id>http://zhaijd.github.io/2014/03/19/CaminteJS/</id>
    <published>2014-03-19T10:52:15.000Z</published>
    <updated>2014-03-19T10:53:11.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://travis-ci.org/biggora/caminte" target="_blank"><img src="https://travis-ci.org/biggora/caminte.png?branch=master" alt="Build Status"></a>
<a href="https://gemnasium.com/biggora/caminte" target="_blank"><img src="https://gemnasium.com/biggora/caminte.png" alt="Dependency Status"></a>
<a href="http://badge.fury.io/js/caminte" target="_blank"><img src="https://badge.fury.io/js/caminte.png" alt="NPM version"></a></p>
<h2 id="about-camintejs">About CaminteJS</h2>
<p>CaminteJS is cross-db ORM for nodejs, providing common interface to access
most popular database formats.</p>
<h4 id="camintejs-adapters-">CaminteJS adapters:</h4>
<pre><code>mysql, sqlite3, riak, postgres, couchdb, mongodb, redis, neo4j, firebird, rethinkdb, tingodb
</code></pre><table>
    <tr>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/memory.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/mongodb.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/mysql.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/postgresql.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/sqlite.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/mariadb.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/firebird.png"/></td><br>    </tr>
    <tr>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/couchdb.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/rethinkdb.png"/></td>
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/redis.png"/></td> 
      <td><img width="100" src="https://github.com/biggora/caminte/raw/master/media/tingodb.png"/></td><br>      <td colspan="3"></td>
    </tr>
</table>

<h2 id="installation">Installation</h2>
<p>First install <a href="http://nodejs.org/" target="_blank">node.js</a>. Then:</p>
<pre><code>$ npm install caminte -g
</code></pre><h2 id="overview">Overview</h2>
<ul>
<li><a href="#connecting">Connecting to DB</a></li>
<li><a href="#defining">Defining a Model</a></li>
<li><a href="#accessing">Accessing a Model</a></li>
<li><a href="#validations">Setup Validations</a></li>
<li><a href="#api">Common API methods</a></li>
<li><a href="#custom">Define any Custom Method</a></li>
<li><a href="#queries">Queries</a></li>
<li><a href="#middleware">Middleware (Hooks)</a></li>
<li><a href="#lifecycle">Object lifecycle</a></li>
<li><a href="#adapter">Your own database adapter</a></li>
<li><a href="#running_tests">Running tests</a></li>
</ul>
<p><a name="connecting"></a></p>
<h3 id="connecting-to-db">Connecting to DB</h3>
<p>First, we need to define a connection.</p>
<h4 id="mysql">MySQL</h4>
<p>For MySQL database need install <a href="https://github.com/felixge/node-mysql/" target="_blank">mysql client</a>. Then:</p>
<pre><code>$ npm install mysql -g
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>    <span class="keyword">var</span> caminte = <span class="built_in">require</span>(<span class="string">'caminte'</span>),
    Schema = caminte.Schema,
    db = {
         driver     : <span class="string">"mysql"</span>,
         host       : <span class="string">"localhost"</span>,
         port       : <span class="string">"3306"</span>,
         username   : <span class="string">"test"</span>,
         password   : <span class="string">"test"</span>,
         database   : <span class="string">"test"</span>
         pool       : <span class="literal">true</span> <span class="comment">// optional for use pool directly </span>
    };

    <span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(db.driver, db);
</pre></td></tr></table></figure>

<h4 id="redis">Redis</h4>
<p>For Redis database need install <a href="https://github.com/mranney/node_redis/" target="_blank">redis client</a>. Then:</p>
<pre><code>$ npm install redis -g
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>    <span class="keyword">var</span> caminte = <span class="built_in">require</span>(<span class="string">'caminte'</span>),
    Schema = caminte.Schema,
    db = {
         driver     : <span class="string">"redis"</span>,
         host       : <span class="string">"localhost"</span>,
         port       : <span class="string">"6379"</span>
    };

    <span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(db.driver, db);
</pre></td></tr></table></figure>

<h4 id="sqlite">SQLite</h4>
<p>For SQLite database need install <a href="https://github.com/developmentseed/node-sqlite3/" target="_blank">sqlite3 client</a>. Then:</p>
<pre><code>$ npm install sqlite3 -g
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>    <span class="keyword">var</span> caminte = <span class="built_in">require</span>(<span class="string">'caminte'</span>),
    Schema = caminte.Schema,
    db = {
         driver     : <span class="string">"sqlite3"</span>,
         database   : <span class="string">"/db/mySite.db"</span>
    };

    <span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(db.driver, db);
</pre></td></tr></table></figure>

<p><a name="defining"></a></p>
<h3 id="defining-a-model">Defining a Model</h3>
<p>Models are defined through the <code>Schema</code> interface.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">// define models</span>
<span class="keyword">var</span> Post = schema.define(<span class="string">'Post'</span>, {
    title:     { type: schema.String,  limit: <span class="number">255</span> },
    content:   { type: schema.Text },
    params:    { type: schema.JSON },
    date:      { type: schema.Date,    <span class="keyword">default</span>: <span class="built_in">Date</span>.now },
    published: { type: schema.Boolean, <span class="keyword">default</span>: <span class="literal">false</span>, index: <span class="literal">true</span> }
});

<span class="comment">// simplier way to describe model</span>
<span class="keyword">var</span> User = schema.define(<span class="string">'User'</span>, {
    name:         <span class="built_in">String</span>,
    bio:          schema.Text,
    approved:     <span class="built_in">Boolean</span>,
    joinedAt:     <span class="built_in">Date</span>,
    age:          <span class="built_in">Number</span>
});
</pre></td></tr></table></figure>

<p><a name="accessing"></a></p>
<h3 id="accessing-a-model">Accessing a Model</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// models also accessible in schema:</span>
schema.models.User;
schema.models.Post;
</pre></td></tr></table></figure>

<p><a name="relationships"></a></p>
<h3 id="setup-relationships">Setup Relationships</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>User.hasMany(Post,   {as: <span class="string">'posts'</span>,  foreignKey: <span class="string">'userId'</span>});
<span class="comment">// creates instance methods:</span>
<span class="comment">// user.posts(conds)</span>
<span class="comment">// user.posts.build(data) // like new Post({userId: user.id});</span>
<span class="comment">// user.posts.create(data) // build and save</span>

Post.belongsTo(User, {as: <span class="string">'author'</span>, foreignKey: <span class="string">'userId'</span>});
<span class="comment">// creates instance methods:</span>
<span class="comment">// post.author(callback) -- getter when called with function</span>
<span class="comment">// post.author() -- sync getter when called without params</span>
<span class="comment">// post.author(user) -- setter when called with object</span>

<span class="comment">// work with models:</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> User;
user.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>
    <span class="keyword">var</span> post = user.posts.build({title: <span class="string">'Hello world'</span>});
    post.save(console.log);
});
</pre></td></tr></table></figure>

<p><a name="validations"></a></p>
<h3 id="setup-validations">Setup Validations</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>User.validatesPresenceOf(<span class="string">'name'</span>, <span class="string">'email'</span>)
User.validatesLengthOf(<span class="string">'password'</span>, {min: <span class="number">5</span>, message: {min: <span class="string">'Password is too short'</span>}});
User.validatesInclusionOf(<span class="string">'gender'</span>, {<span class="keyword">in</span>: [<span class="string">'male'</span>, <span class="string">'female'</span>]});
User.validatesExclusionOf(<span class="string">'domain'</span>, {<span class="keyword">in</span>: [<span class="string">'www'</span>, <span class="string">'billing'</span>, <span class="string">'admin'</span>]});
User.validatesNumericalityOf(<span class="string">'age'</span>, {int: <span class="literal">true</span>});
User.validatesUniquenessOf(<span class="string">'email'</span>, {message: <span class="string">'email is not unique'</span>});

user.isValid(<span class="function"><span class="keyword">function</span> <span class="params">(valid)</span> {</span>
    <span class="keyword">if</span> (!valid) {
        user.errors <span class="comment">// hash of errors {attr: [errmessage, errmessage, ...], attr: ...}</span>
    }
})
</pre></td></tr></table></figure>

<p><a name="api"></a></p>
<h3 id="common-api-methods">Common API methods</h3>
<ul>
<li><a href="#create">create</a></li>
<li><a href="#all">all, run</a></li>
<li><a href="#find">find</a></li>
<li><a href="#findorcreate">findOrCreate</a></li>
<li><a href="#findone">findOne</a></li>
<li><a href="#findbyid">findById</a></li>
<li><a href="#upsert">updateOrCreate, upsert</a></li>
<li><a href="#count">count</a></li>
<li><a href="#remove">remove</a></li>
<li><a href="#destroy">destroy</a></li>
<li><a href="#destroyall">destroyAll</a></li>
</ul>
<h4 id="just-instantiate-model">Just instantiate model</h4>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>   <span class="keyword">var</span> post = <span class="keyword">new</span> Post();
</pre></td></tr></table></figure>

<p><a name="create"></a></p>
<h4 id="-create-callback-">#create(callback)</h4>
<p>Save model (of course async)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>Post.create(<span class="function"><span class="keyword">function</span><span class="params">(err)</span>{</span>
   <span class="comment">// your code here</span>
});
<span class="comment">// same as new Post({userId: user.id});</span>
user.posts.build
<span class="comment">// save as Post.create({userId: user.id}, function(err){</span>
   <span class="comment">// your code here</span>
});
user.posts.create(<span class="function"><span class="keyword">function</span><span class="params">(err)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="all"></a></p>
<h4 id="-all-params-callback-">#all(params, callback)</h4>
<p>Get all instances</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">// all published posts</span>
<span class="keyword">var</span> Query = Post.all();
Query.where(<span class="string">'published'</span>, <span class="literal">true</span>).desc(<span class="string">'date'</span>);
Query.run({}, <span class="function"><span class="keyword">function</span><span class="params">(err, post)</span>{</span>
   <span class="comment">// your code here</span>
});
<span class="comment">// all posts</span>
Post.all(<span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
<span class="comment">// all posts by user</span>
Post.all({where: {userId: <span class="number">2</span>}, order: <span class="string">'id'</span>, limit: <span class="number">10</span>, skip: <span class="number">20</span>}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
<span class="comment">// the same as prev</span>
user.posts(<span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
})
</pre></td></tr></table></figure>

<p><a name="find"></a></p>
<h4 id="-find-params-callback-">#find(params, callback)</h4>
<p>Find instances</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">// all posts</span>
Post.find(<span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});

<span class="comment">// all posts by user</span>
<span class="keyword">var</span> Query = Post.find();
Query.where(<span class="string">'userId'</span>, <span class="number">2</span>);
Query.order(<span class="string">'id'</span>, <span class="string">'ASC'</span>);
Query.skip(<span class="number">20</span>).limit(<span class="number">10</span>);

Query.run({},<span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});

<span class="comment">// the same as prev</span>
Post.find({where: {userId: user.id}, order: <span class="string">'id'</span>, limit: <span class="number">10</span>, skip: <span class="number">20</span>}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="findorcreate"></a></p>
<h4 id="-findorcreate-params-data-callback-">#findOrCreate(params, data, callback)</h4>
<p>Find if exists or create instance.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// find user by email</span>
User.findOrCreate({
      email : <span class="string">'example@example.com'</span>
    }, {
      name : <span class="string">'Gocha'</span>,
      age : <span class="number">31</span>
    }, <span class="function"><span class="keyword">function</span><span class="params">(err, user)</span>{</span>
      <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="findone"></a></p>
<h4 id="-findone-params-callback-">#findOne(params, callback)</h4>
<p>Get one latest instance
{where: {published: true}, order: &#39;date DESC&#39;}</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>Post.findOne({where: {published: <span class="literal">true</span>}, order: <span class="string">'date DESC'</span>}, <span class="function"><span class="keyword">function</span><span class="params">(err, post)</span>{</span>
   <span class="comment">// your code here</span>
});
<span class="comment">// or</span>
<span class="keyword">var</span> Query = Post.findOne();
Query.where(<span class="string">'published'</span>,<span class="literal">true</span>).desc(<span class="string">'date'</span>);
Query.run({}, <span class="function"><span class="keyword">function</span><span class="params">(err, post)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="findbyid"></a></p>
<h4 id="-findbyid-id-callback-">#findById(id, callback)</h4>
<p>Find instance by id</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>User.findById(<span class="number">1</span>, <span class="function"><span class="keyword">function</span><span class="params">(err, user)</span>{</span>
   <span class="comment">// your code here</span>
})
</pre></td></tr></table></figure>

<p><a name="upsert"></a></p>
<h4 id="-updateorcreate-params-data-callback-">#updateOrCreate(params, data, callback)</h4>
<p>Update if exists or create instance</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>Post.updateOrCreate({
      id: <span class="number">100</span>
    }, {
      title: <span class="string">'Riga'</span>,
      tag: <span class="string">'city'</span>
    }, <span class="function"><span class="keyword">function</span><span class="params">(err, post)</span>{</span>
      <span class="comment">// your code here</span>
});
<span class="comment">// or</span>
User.updateOrCreate({
      email: <span class="string">'example@example.com'</span>
    }, {
      name: <span class="string">'Alex'</span>,
      age: <span class="number">43</span>
    }, <span class="function"><span class="keyword">function</span><span class="params">(err, user)</span>{</span>
      <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="count"></a></p>
<h4 id="-count-params-callback-">#count(params, callback)</h4>
<p>Count instances</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// count posts by user</span>
Post.count({where: {userId: user.id}}, <span class="function"><span class="keyword">function</span><span class="params">(err, count)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="remove"></a></p>
<h4 id="-remove-params-callback-">#remove(params, callback)</h4>
<p>Remove instances.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// remove all unpublished posts</span>
Post.remove({where: {published: <span class="literal">false</span>}},<span class="function"><span class="keyword">function</span><span class="params">(err)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="destroy"></a></p>
<h4 id="-destroy-callback-">#destroy(callback)</h4>
<p>Destroy instance</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>User.findById(<span class="number">22</span>, <span class="function"><span class="keyword">function</span><span class="params">(err, user)</span> {</span>
    user.destroy(<span class="function"><span class="keyword">function</span><span class="params">(err)</span>{</span>
       <span class="comment">// your code here</span>
    });
});
<span class="comment">// or</span>
User.destroyById(<span class="number">22</span>, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> {</span>
    <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="destroyall"></a></p>
<h4 id="-destroyall-callback-">#destroyAll(callback)</h4>
<p>Destroy all instances</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>User.destroyAll(<span class="function"><span class="keyword">function</span><span class="params">(err)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="scope"></a></p>
<h3 id="define-scope">Define scope</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>Post.scope(<span class="string">'active'</span>, { published : <span class="literal">true</span> });

Post.active(<span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
    <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="custom"></a></p>
<h3 id="define-any-custom-method">Define any Custom Method</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>User.prototype.getNameAndAge = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">', '</span> + <span class="keyword">this</span>.age;
};
</pre></td></tr></table></figure>

<p><a name="queries"></a></p>
<h3 id="queries">Queries</h3>
<h4 id="api-methods">API methods</h4>
<ul>
<li><a href="#where">where</a></li>
<li><a href="#gt">gt</a></li>
<li><a href="#gte">gte</a></li>
<li><a href="#lt">lt</a></li>
<li><a href="#lte">lte</a></li>
<li><a href="#ne">ne</a></li>
<li>[in, inq] (#in)</li>
<li><a href="#nin">nin</a></li>
<li><a href="#regex">regex</a></li>
<li><a href="#like">like</a></li>
<li><a href="#nlike">nlike</a></li>
<li><a href="#sort">sort, order</a></li>
<li><a href="#asc">asc</a></li>
<li><a href="#desc">desc</a></li>
<li><a href="#limit">limit</a></li>
<li><a href="#skip">skip</a></li>
<li><a href="#slice">slice</a></li>
<li><a href="#between">between</a></li>
</ul>
<h4 id="example-queries">Example Queries</h4>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">var</span> Query = User.find();
Query.where(<span class="string">'active'</span>, <span class="number">1</span>);
Query.order(<span class="string">'id DESC'</span>);
Query.run({}, <span class="function"><span class="keyword">function</span><span class="params">(err, users)</span> {</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="where"></a></p>
<h4 id="-where-key-val-">#where(key, val)</h4>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">var</span> Query = User.find();
Query.where(<span class="string">'userId'</span>, user.id);
Query.run({}, <span class="function"><span class="keyword">function</span><span class="params">(err, count)</span>{</span>
   <span class="comment">// your code here</span>
});
<span class="comment">// the same as prev</span>
User.find({where: {userId: user.id}}, <span class="function"><span class="keyword">function</span><span class="params">(err, users)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="gt"></a></p>
<h4 id="-gt-key-val-">#gt(key, val)</h4>
<p>Specifies a greater than expression.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Query.gt(<span class="string">'userId'</span>, <span class="number">100</span>);
Query.where(<span class="string">'userId'</span>).gt(<span class="number">100</span>);
<span class="comment">// the same as prev</span>
User.find({
      where: {
         userId: {
              gt : <span class="number">100</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, users)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="gte"></a></p>
<h4 id="-gte-key-val-">#gte(key, val)</h4>
<p>Specifies a greater than or equal to expression.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Query.gte(<span class="string">'userId'</span>, <span class="number">100</span>);
Query.where(<span class="string">'userId'</span>).gte(<span class="number">100</span>);
<span class="comment">// the same as prev</span>
User.find({
      where: {
         userId: {
              gte : <span class="number">100</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, users)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="lt"></a></p>
<h4 id="-lt-key-val-">#lt(key, val)</h4>
<p>Specifies a less than expression.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Query.lt(<span class="string">'visits'</span>, <span class="number">100</span>);
Query.where(<span class="string">'visits'</span>).lt(<span class="number">100</span>);
<span class="comment">// the same as prev</span>
Post.find({
      where: {
         visits: {
              lt : <span class="number">100</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="lte"></a></p>
<h4 id="-lte-key-val-">#lte(key, val)</h4>
<p>Specifies a less than or equal to expression.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Query.lte(<span class="string">'visits'</span>, <span class="number">100</span>);
Query.where(<span class="string">'visits'</span>).lte(<span class="number">100</span>);
<span class="comment">// the same as prev</span>
Post.find({
      where: {
         visits: {
              lte : <span class="number">100</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="ne"></a></p>
<h4 id="-ne-key-val-">#ne(key, val)</h4>
<p>Matches all values that are not equal to the value specified in the query.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Query.ne(<span class="string">'userId'</span>, <span class="number">100</span>);
Query.where(<span class="string">'userId'</span>).ne(<span class="number">100</span>);
<span class="comment">// the same as prev</span>
User.find({
      where: {
         userId: {
              ne : <span class="number">100</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, users)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="in"></a></p>
<h4 id="-in-key-val-">#in(key, val)</h4>
<p>Matches any of the values that exist in an array specified in the query.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Query.in(<span class="string">'userId'</span>, [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]);
Query.where(<span class="string">'userId'</span>).in([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]);
<span class="comment">// the same as prev</span>
User.find({
      where: {
         userId: {
              <span class="keyword">in</span> : [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, users)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="regex"></a></p>
<h4 id="-regex-key-val-">#regex(key, val)</h4>
<p>Selects rows where values match a specified regular expression.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Query.regex(<span class="string">'title'</span>, <span class="string">'intel'</span>);
Query.where(<span class="string">'title'</span>).regex(<span class="string">'intel'</span>);
<span class="comment">// the same as prev</span>
Post.find({
      where: {
         title: {
              regex : <span class="string">'intel'</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="like"></a></p>
<h4 id="-like-key-val-">#like(key, val)</h4>
<p>Pattern matching using a simple regular expression comparison.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>Query.like(<span class="string">'title'</span>, <span class="string">'intel'</span>);
<span class="comment">// the same as prev</span>
Post.find({
      where: {
         title: {
              like : <span class="string">'intel'</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="nlike"></a></p>
<h4 id="-nlike-key-val-">#nlike(key, val)</h4>
<p>Pattern not matching using a simple regular expression comparison.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>Query.nlike(<span class="string">'title'</span>, <span class="string">'intel'</span>);
<span class="comment">// the same as prev</span>
Post.find({
      where: {
         title: {
              nlike : <span class="string">'intel'</span>
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="nin"></a></p>
<h4 id="-nin-key-val-">#nin(key, val)</h4>
<p>Matches values that do not exist in an array specified to the query.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>Query.nin(<span class="string">'id'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);
<span class="comment">// the same as prev</span>
Post.find({
      where: {
          title : {
                   nin : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
          }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="sort"></a></p>
<h4 id="-sort-key-val-">#sort(key, val)</h4>
<p>Sets the sort column and direction.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Query.sort(<span class="string">'title DESC'</span>);
Query.sort(<span class="string">'title'</span>, <span class="string">'DESC'</span>);
<span class="comment">// the same as prev</span>
Post.find({
      order: <span class="string">'title DESC'</span>
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="asc"></a></p>
<h4 id="-asc-key-">#asc(key)</h4>
<p>Sets the sort column and direction ASC.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>Query.asc(<span class="string">'title'</span>);
<span class="comment">// is the same as</span>
Query.sort(<span class="string">'title ASC'</span>);
<span class="comment">// the same as prev</span>
Post.find({
      order: <span class="string">'title ASC'</span>
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="desc"></a></p>
<h4 id="-desc-key-">#desc(key)</h4>
<p>Sets the sort column and direction DESC.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>Query.desc(<span class="string">'title'</span>);
<span class="comment">// is the same as</span>
Query.sort(<span class="string">'title DESC'</span>);
<span class="comment">// the same as prev</span>
Post.find({
      order: <span class="string">'title DESC'</span>
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="skip"></a></p>
<h4 id="-skip-val-">#skip(val)</h4>
<p>The skip method specifies at which row the database should begin returning results.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>Query.skip(<span class="number">10</span>);
<span class="comment">// the same as prev</span>
Post.find({
      skip: <span class="number">10</span>
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="limit"></a></p>
<h4 id="-limit-val-">#limit(val)</h4>
<p>The limit method specifies the max number of rows to return.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>Query.limit(<span class="number">10</span>);
<span class="comment">// the same as prev</span>
Post.find({
      limit: <span class="number">10</span>
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="slice"></a></p>
<h4 id="-slice-val-">#slice(val)</h4>
<p>Limits the number of elements projected from an array. Supports skip and limit slices.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Query.slice([<span class="number">20</span>,<span class="number">10</span>]);
<span class="comment">// the same as prev</span>
Post.find({
      skip: <span class="number">20</span>,
      limit: <span class="number">10</span>
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="between"></a></p>
<h4 id="-between-key-val-">#between(key, val)</h4>
<p>Check whether a value is within a range of values.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>Query.between(<span class="string">'created'</span>, [<span class="string">'2013-01-01'</span>,<span class="string">'2013-01-08'</span>]);
<span class="comment">// the same as prev</span>
Post.find({
      where: {
         created: {
            between : [<span class="string">'2013-01-01'</span>,<span class="string">'2013-01-08'</span>]
         }
      }
    }}, <span class="function"><span class="keyword">function</span><span class="params">(err, posts)</span>{</span>
   <span class="comment">// your code here</span>
});
</pre></td></tr></table></figure>

<p><a name="middleware"></a></p>
<h3 id="middleware-hooks-">Middleware (Hooks)</h3>
<p>The following callbacks supported:</p>
<pre><code>- afterInitialize
- beforeCreate
- afterCreate
- beforeSave
- afterSave
- beforeUpdate
- afterUpdate
- beforeDestroy
- afterDestroy
- beforeValidation
- afterValidation
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>User.afterUpdate = <span class="function"><span class="keyword">function</span> <span class="params">(next)</span> {</span>
    <span class="keyword">this</span>.updated_ts = <span class="keyword">new</span> <span class="built_in">Date</span>();
    <span class="keyword">this</span>.save();
    <span class="comment">// Pass control to the next</span>
    next();
};
</pre></td></tr></table></figure>

<p>Each callback is class method of the model, it should accept single argument: <code>next</code>, this is callback which
should be called after end of the hook. Except <code>afterInitialize</code> because this method is syncronous (called after <code>new Model</code>).</p>
<h3 id="automigrate">Automigrate</h3>
<p>required only for mysql NOTE: it will drop User and Post tables</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>schema.automigrate();
</pre></td></tr></table></figure>

<p><a name="lifecycle"></a></p>
<h2 id="object-lifecycle-">Object lifecycle:</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="keyword">var</span> user = <span class="keyword">new</span> User;
<span class="comment">// afterInitialize</span>
user.save(callback);
<span class="comment">// beforeValidation</span>
<span class="comment">// afterValidation</span>
<span class="comment">// beforeSave</span>
<span class="comment">// beforeCreate</span>
<span class="comment">// afterCreate</span>
<span class="comment">// afterSave</span>
<span class="comment">// callback</span>
user.updateAttribute(<span class="string">'email'</span>, <span class="string">'email@example.com'</span>, callback);
<span class="comment">// beforeValidation</span>
<span class="comment">// afterValidation</span>
<span class="comment">// beforeUpdate</span>
<span class="comment">// afterUpdate</span>
<span class="comment">// callback</span>
user.destroy(callback);
<span class="comment">// beforeDestroy</span>
<span class="comment">// afterDestroy</span>
<span class="comment">// callback</span>
User.create(data, callback);
<span class="comment">// beforeValidate</span>
<span class="comment">// afterValidate</span>
<span class="comment">// beforeCreate</span>
<span class="comment">// afterCreate</span>
<span class="comment">// callback</span>
</pre></td></tr></table></figure>

<p>Read the tests for usage examples: ./test/common_test.js
Validations: ./test/validations_test.js</p>
<p><a name="adapter"></a></p>
<h2 id="your-own-database-adapter">Your own database adapter</h2>
<p>To use custom adapter, pass it&#39;s package name as first argument to <code>Schema</code> constructor:</p>
<pre><code>mySchema = new Schema(&#39;couch-db-adapter&#39;, {host:.., port:...});
</code></pre><p>Make sure, your adapter can be required (just put it into ./node_modules):</p>
<pre><code>require(&#39;couch-db-adapter&#39;);
</code></pre><p><a name="running_tests"></a></p>
<h2 id="running-tests">Running tests</h2>
<p>To run all tests (requires all databases):</p>
<pre><code>npm test
</code></pre><p>If you run this line, of course it will fall, because it requres different databases to be up and running,
but you can use js-memory-engine out of box! Specify ONLY env var:</p>
<pre><code>ONLY=memory nodeunit test/common_test.js
</code></pre><p>of course, if you have redis running, you can run</p>
<pre><code>ONLY=redis nodeunit test/common_test.js
</code></pre><h2 id="package-structure">Package structure</h2>
<p>Now all common logic described in <code>./lib/*.js</code>, and database-specific stuff in <code>./lib/adapters/*.js</code>. It&#39;s super-tiny, right?</p>
<h2 id="contributing">Contributing</h2>
<p>If you have found a bug please write unit test, and make sure all other tests still pass before pushing code to repo.</p>
<h2 id="recommend-extensions">Recommend extensions</h2>
<ul>
<li><a href="http://www.trintejs.com/" target="_blank">TrinteJS - Javascrpt MVC Framework for Node.JS</a></li>
<li><a href="https://github.com/biggora/express-mongodb" target="_blank">Cross-db Session Storage for ExpressJS</a></li>
<li><a href="https://github.com/biggora/connect-caminte" target="_blank">MongoDB Session Storage for ExpressJS</a></li>
<li><a href="https://github.com/biggora/express-useragent" target="_blank">Middleware exposing user-agent for NodeJS</a></li>
<li><a href="https://github.com/biggora/express-uploader" target="_blank">Uploading files middleware for NodeJS</a></li>
<li><a href="https://github.com/biggora/2co" target="_blank">2CO NodeJS adapter for 2checkout API payment gateway</a></li>
</ul>
<h2 id="license">License</h2>
<p>(The MIT License)</p>
<p>Copyright (c) 2011 by Anatoliy Chakkaev <mail [åt] anatoliy [døt] in></p>
<p>Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
&#39;Software&#39;), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:</p>
<p>The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED &#39;AS IS&#39;, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<h2 id="resources">Resources</h2>
<ul>
<li>Visit the <a href="http://www.gordejev.lv" target="_blank">author website</a>.</li>
<li>Visit the <a href="http://www.camintejs.com" target="_blank">CaminteJS</a> home page.</li>
<li>Follow <a href="https://twitter.com/#!/biggora" target="_blank">@biggora</a> on Twitter for updates.</li>
<li>Report issues on the <a href="https://github.com/biggora/caminte/issues" target="_blank">github issues</a> page.</li>
</ul>
<p><a href="https://github.com/igrigorik/ga-beacon" target="_blank"><img src="https://ga-beacon.appspot.com/UA-22788134-5/caminte/readme" alt="Analytics"></a> <a href="https://bitdeli.com/free" title="Bitdeli Badge" target="_blank"><img src="https://d2weczhvl823v0.cloudfront.net/biggora/caminte/trend.png" alt="Bitdeli Badge"></a></p>
]]></content>
    
    
      <category term="nodejs" scheme="http://zhaijd.github.io/tags/nodejs/"/>
    
      <category term="mysql" scheme="http://zhaijd.github.io/tags/mysql/"/>
    
      <category term="nodejs" scheme="http://zhaijd.github.io/categories/nodejs/"/>
    
      <category term="mysql" scheme="http://zhaijd.github.io/categories/nodejs/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随笔]]></title>
    <link href="http://zhaijd.github.io/2014/03/02/20140302-%E9%9A%8F%E7%AC%94/"/>
    <id>http://zhaijd.github.io/2014/03/02/20140302-随笔/</id>
    <published>2014-03-02T06:22:49.000Z</published>
    <updated>2014-03-02T06:22:49.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    
    
      <category term="sublime" scheme="http://zhaijd.github.io/tags/sublime/"/>
    
      <category term="markdown" scheme="http://zhaijd.github.io/tags/markdown/"/>
    
      <category term="生活琐事" scheme="http://zhaijd.github.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[适用于 Mac OS 的 NTFS 驱动程序(希捷硬盘)]]></title>
    <link href="http://zhaijd.github.io/2014/02/25/%E5%B8%8C%E6%8D%B7%E7%A1%AC%E7%9B%98-%E9%80%82%E7%94%A8%E4%BA%8E%20Mac%20OS%20%E7%9A%84%20NTFS%20%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://zhaijd.github.io/2014/02/25/希捷硬盘-适用于 Mac OS 的 NTFS 驱动程序/</id>
    <published>2014-02-25T12:05:20.000Z</published>
    <updated>2014-02-25T12:05:41.000Z</updated>
    <content type="html"><![CDATA[<p>移动硬盘，由于要放置大文件，使用了<code>NTFS</code>格式,但是这种格式在mac下面不支持写操作，后来发现可以使用<code>Paragon NTFS for MAC</code> 但是这个软件收费的 ￥115，当然你可以选用破解版，但最新的破解版由于破解不完整，已经失效了，个人癖好，宁愿不用，也不想用老版本的软件。</p>
<p>都准备格式化硬盘成<code>Ext</code>格式了，突然峰回路转，发现了希捷官方有其硬盘的mac 版本驱动，激动啊。
<a href="http://www.seagate.com/cn/zh/support/downloads/item/ntfs-driver-for-mac-os-master-dl/" target="_blank">http://www.seagate.com/cn/zh/support/downloads/item/ntfs-driver-for-mac-os-master-dl/</a>
下载安装后问题迎刃而解了。</p>
]]></content>
    
    
      <category term="mac" scheme="http://zhaijd.github.io/tags/mac/"/>
    
      <category term="ntfs" scheme="http://zhaijd.github.io/tags/ntfs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用脚本收藏]]></title>
    <link href="http://zhaijd.github.io/2014/02/24/shell/common-shell/"/>
    <id>http://zhaijd.github.io/2014/02/24/shell/common-shell/</id>
    <published>2014-02-24T04:04:51.000Z</published>
    <updated>2014-02-24T04:05:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-hotelseq-detail-">1. 通过hotelseq拼detail页链接</h3>
<p>有时我们会从数据库中或者数据分布文件中导出一份儿hotelseq列表，并需要将他们转换成外网detail页的链接，最好的办法是直接在sql里通过数据库提供的字符串函数来做，如果没有在sql里做，那么也可以通过这条awk脚本来做：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>echo <span class="string">"beijing_city_219"</span> | awk '{lastindex=<span class="number">0</span>; idx = <span class="number">0</span>; str = $<span class="number">0</span>; <span class="keyword">while</span>(<span class="number">1</span>){idx = index(str, <span class="string">"_"</span>); <span class="keyword">if</span>(idx==<span class="number">0</span>) <span class="keyword">break</span>; str=substr(str, idx+<span class="number">1</span>); lastindex+=idx;} cityurl = substr($<span class="number">0</span>, <span class="number">1</span>, lastindex-<span class="number">1</span>); seq = substr($<span class="number">0</span>, lastindex+<span class="number">1</span>); print <span class="string">"http://hotel.qunar.com/"</span> cityurl <span class="string">"/dt-"</span> seq }'
</pre></td></tr></table></figure>

<p>另外，使用sed的替换方法也可以完成，命令如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>echo "beijing_city_219" | sed -n '/_/p' | sed -n  's/<span class="command">\(</span>.*<span class="command">\)</span>_<span class="command">\(</span><span class="special">[</span>0-9<span class="special">]</span>*<span class="command">\)</span>*<span class="formula">$/http:<span class="command">\/</span><span class="command">\/</span>hotel.qunar.com<span class="command">\/</span>\1<span class="command">\/</span>dt-\2/gp'</span>
</pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-">2. 对日志中某一数字列求和</h3>
<p>当时是为了从日志中找出一天内一台twell发了多少消息，twell记录发消息的日志格式为：presend finished ignored 17,recieved 0, send 5，我们需要统计的是send后的数量，对其做sum，我们可以通过这条awk脚本来实现，假设这个日志文件为当前目录下的rebuild1.txt:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>awk '{sum+=$NF;}<span class="operator"><span class="keyword">END</span>{print <span class="aggregate">sum</span>}<span class="string">' rebuild1.txt</span></span>
</pre></td></tr></table></figure>

<p>上述命令利用了awk中NF变量，NF为总字段数，$NF表示最后一个字段的值
也可以使用sed命令完成，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>cat rebuild1.txt | sed  's/.*send<span class="special">[</span><span class="special">[</span>:blank:<span class="special">]</span><span class="special">]</span><span class="command">\+</span><span class="command">\(</span><span class="special">[</span>0-9<span class="special">]</span><span class="command">\+</span><span class="command">\)</span>.*/\1/g' | awk '<span class="special">{</span>sum+=<span class="formula">$1<span class="special">}</span> END<span class="special">{</span>print sum<span class="special">}</span>'</span>
</pre></td></tr></table></figure>

<p>利用sed命令找出每行在send后面的数字，组成一个只有一列的文件，然后利用awk求和</p>
<h3 id="3-twell-">3. 查看每台twell的版本号</h3>
<p>twell发布前端代码后，一个很重要的发布后检查项为version文件，如果version文件不对，那么就可能因为浏览器缓存导致样式错乱或者脚本功能不对。检查version文件的方法是在cn2跳板机或任何一台能够ssh到twell服务器的机器上执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">for</span> i <span class="keyword">in</span> {<span class="number">1</span>..<span class="number">8</span>} b1 b2
<span class="keyword">do</span> ssh l-tw<span class="variable">$i</span>.h.cn2 <span class="string">"cat /server/hotel.qunar.com/htdocs/ROOT/version"</span>
<span class="keyword">done</span>
</pre></td></tr></table></figure>

<h3 id="4-tomcat-access-log-uri-">4.统计tomcat access log中各uri被访问的次数</h3>
<p>有些时候我们需要统计某一个高峰时段，或者一天之内web app的哪些页面对访问过，且被访问了多少次。我们可以通过如下脚本来实现。假设tomcat access log文件为当前目录下的localaccess_0406.txt，我们需要统计9:30:00-9:35:59这段时间内被访问过的页面以及对应的访问次数，并将结果写入自己的home目录下的access_0406_uris_0930文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>grep '<span class="number">06</span>/Apr/<span class="number">2011</span>:<span class="number">09</span>:<span class="number">3</span>[<span class="number">0</span>-<span class="number">5</span>]' localaccess_0406.txt | awk '{a=$<span class="number">0</span>; b=index(a, <span class="string">"GET"</span>); use_get=<span class="number">1</span>; <span class="keyword">if</span>(b==<span class="number">0</span>){ use_get=<span class="number">0</span>; b=index(a,<span class="string">"POST"</span>);}; b=b+(use_get&gt;<span class="number">0</span>?<span class="number">4</span>:<span class="number">5</span>); <span class="keyword">if</span>(b!=<span class="number">0</span>){ e=index(a, <span class="string">"?"</span>); e1=index(a,<span class="string">"HTTP/1.0"</span>); <span class="keyword">if</span>(e1 &gt; <span class="number">0</span>) {e = e1 &gt; e && e &gt; <span class="number">0</span>? e:e1}; c=substr(a, b, e-b); print c;}}' | sort | uniq -c | sort -rn&gt; ~/access_0406_uris_0930
</pre></td></tr></table></figure>

<p>另外，也可以使用sed命令完成，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">grep</span> <span class="string">'06/Dec/2012:14:13:00'</span> access.<span class="number">2012</span>-<span class="number">12</span>-<span class="number">06</span>.<span class="keyword">log</span>  | sed -r <span class="string">'s/^.*((GET)|(POST))([^?]*?).*HTTP.*$/\4/g'</span> | <span class="keyword">sort</span> | uniq -c
</pre></td></tr></table></figure>

<p>sed命令提出每行中 POST或GET后的网址，组成一个单列的文本，然后再sort ,uniq</p>
<h3 id="5-tomcat-access-log-ip-ua-">5. 对tomcat access log中的用户ip和ua做统计</h3>
<p>咱们的tomcat access log中，每一行的最后一列记录的是访问这个url的客户端ip，那么这个统计可以实现为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>cat localaccess_0406 | awk <span class="string">'{print $NF}'</span> | <span class="built_in">sort</span> | uniq -c| <span class="built_in">sort</span> -rn &gt; ip_0406_stat
</pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">atnodes</span> -L $<span class="string">'zcat /home/q/www/hotel.qunar.com/logs/access.2012-08-30.log.gz | perl -lne \'if(<span class="variable">$_</span>=~m/2012:2[0-3].*GET \/price\/detail.jsp.*MSIE/){my <span class="variable">@words</span>=split /"/, <span class="variable">$_</span>; <span class="variable">$size</span>=<span class="variable">@words</span>; print <span class="variable">$words</span>[<span class="variable">$size</span>-4];}\''</span> l-tw[<span class="number">1</span>-<span class="number">18</span>].h.cn6.qunar.com
</pre></td></tr></table></figure>

<p>如果每行只出现一个IP，且位置不固定，也可以用sed命令提取出每行中的IP地址，组成单列的文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>cat localaccess_0406 | sed  's/<span class="command">\(</span>.*<span class="special">[</span>酒店系统运维常用脚本（非脚本内容请放别处）^0-9<span class="special">]</span><span class="command">\+</span><span class="command">\|</span>^<span class="command">\)</span><span class="command">\(</span><span class="special">[</span>0-9<span class="special">]</span><span class="command">\{</span>1,3<span class="command">\}</span><span class="command">\.</span><span class="special">[</span>0-9<span class="special">]</span><span class="command">\{</span>1,3<span class="command">\}</span><span class="command">\.</span><span class="special">[</span>0-9<span class="special">]</span><span class="command">\{</span>1,3<span class="command">\}</span><span class="command">\.</span><span class="special">[</span>0-9<span class="special">]</span><span class="command">\{</span>1,3<span class="command">\}</span><span class="command">\)</span><span class="command">\(</span><span class="special">[</span>酒店系统运维常用脚本（非脚本内容请放别处）^0-9<span class="special">]</span><span class="command">\+</span>.*<span class="command">\|</span><span class="formula">$<span class="command">\)</span>.*/\2/g' |sort  |uniq -c | sort -k1 -nr &gt; ip_0406_stat</span>
</pre></td></tr></table></figure>

<h3 id="6-uri-cityurl-fromdate-price-localaccess_0407_1400-">6. 按照uri, cityurl, fromDate对price目录下的文件的访问做统计。假设日志文件为 localaccess_0407_1400，所有操作都作用在当前目录下</h3>
<p>（1）过滤出所有price目录下的访问</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">grep</span> <span class="string">'price'</span> localaccess_0407_140<span class="number">0</span> &gt; localaccess_0407_1400_price
</pre></td></tr></table></figure>

<p>（2）过滤每一行访问日志，只留下uri和参数中的cityurl和fromDate：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>cat  localaccess_0407_1400_price | awk '{a=$<span class="number">0</span>; b=index(a, <span class="string">"GET"</span>); use_get=<span class="number">1</span>; <span class="keyword">if</span>(b==<span class="number">0</span>){ use_get=<span class="number">0</span>; b=index(a,<span class="string">"POST"</span>);}; b=b+(use_get&gt;<span class="number">0</span>?<span class="number">4</span>:<span class="number">5</span>); <span class="keyword">if</span>(b!=<span class="number">0</span>){e1=index(a,<span class="string">"HTTP/1.0"</span>);c=substr(a, b, e1-b); cqidx = index(c, <span class="string">"?"</span>); <span class="keyword">if</span>(cqidx &gt; <span class="number">0</span>){c1=substr(c, <span class="number">0</span>, cqidx-<span class="number">1</span>); c2=substr(c, cqidx+<span class="number">1</span>, <span class="property">length</span>(c)-cqidx); split(c2, carr, <span class="string">"&"</span>); <span class="keyword">for</span>(i <span class="keyword">in</span> carr){param=carr[i]; cityIdx = index(param, <span class="string">"cityurl="</span>); <span class="keyword">if</span>(cityIdx&gt;<span class="number">0</span>){city=substr(param, cityIdx+<span class="number">8</span>);} fromIdx = index(param, <span class="string">"fromDate="</span>); <span class="keyword">if</span>(fromIdx&gt;<span class="number">0</span>){fromDate=substr(param, fromIdx+<span class="number">9</span>);}} print c1 <span class="string">" "</span> city <span class="string">" "</span> fromDate}}}' &gt; localaccess_0407_1400_city_fromDate
</pre></td></tr></table></figure>

<p>（3）按照uri, cityurl，fromDate group by</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>cat localaccess_0407_1400_city_fromDate | <span class="built_in">sort</span> | uniq -c | <span class="built_in">sort</span> -rn &gt; localaccess_0407_1400_city_fromDate_stat
</pre></td></tr></table></figure>

<p>以上三条语句也可合成一个，使用sed的脚本如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">grep</span> <span class="string">'price'</span> localaccess_0407_140<span class="number">0</span> | sed -r <span class="string">'s/^.*(POST|GET)[[:blank:]]([酒店系统运维常用脚本（非脚本内容请放别处）^\?]+)\?.*cityurl=([酒店系统运维常用脚本（非脚本内容请放别处）^&]*).*fromDate=([^&[:blank:]]*).*$/\2 \3 \4/'</span> | <span class="keyword">sort</span> | uniq -c | <span class="keyword">sort</span> -rn &gt; localaccess_0407_1400_city_fromDate_stat
</pre></td></tr></table></figure>

<h3 id="7-grep-">7. grep 对多搜索模式的支持</h3>
<p>以下两种方法都可以实现对多搜索模式的支持：</p>
<p>（1）grep -e</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>grep <span class="operator">-e</span> <span class="string">'06/Apr/2011:09:3[0-2]'</span> <span class="operator">-e</span> <span class="string">'06/Apr/2011:09:3[3-5]'</span> localaccess_0406_0930
</pre></td></tr></table></figure>

<p>（2）grep -E</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>grep -<span class="keyword">E</span> <span class="string">'(06/Apr/2011:09:3[0-2])|(06/Apr/2011:09:3[3-5])'</span> localaccess_0406_0930
</pre></td></tr></table></figure>

<h3 id="8-q-">8. 分析q-后的查询条件</h3>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">for</span> i <span class="keyword">in</span> {<span class="number">12</span>..<span class="number">23</span>}; <span class="keyword">do</span> zcat /home/q/www/hslist/logs/catalina.out.<span class="number">2011</span>-<span class="number">05</span>-<span class="number">15</span>-<span class="variable">$i</span>-<span class="number">02</span>.gz | grep <span class="string">'doSearch error, uri:'</span> &gt;&gt; timeout_uris; <span class="keyword">done</span>
</pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">zcat</span> /home/q/www/hslist/logs/catalina.out.<span class="number">2011</span>-<span class="number">05</span>-<span class="number">04</span>-<span class="regexp">*.gz</span>| grep <span class="string">'doSearch error, uri'</span> | sed -r <span class="string">'s/.*q=([酒店系统运维常用脚本（非脚本内容请放别处）^&]*).*$/\1/'</span> | perl -e <span class="string">'while(&lt;&gt;) { use URI::Escape; print uri_unescape(<span class="variable">$_</span>);}'</span> | sort | uniq &gt; <span class="built_in">error</span>Queries
</pre></td></tr></table></figure>

<h3 id="9-awk-">9. 使用awk合并两个文件中数据</h3>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">awk</span> <span class="string">'NR==FNR{ name[x++]=<span class="variable">$1</span> }NR&gt;FNR{ print name[i++] " "  <span class="variable">$1</span>}'</span> <span class="number">1</span>.txt <span class="number">2</span>.txt| more
</pre></td></tr></table></figure>

<p>|1.txt:|
|111111|
|222222|
|333333|</p>
<h3 id="10-awk-">10.使用awk对比两个文件然后输出结果</h3>
<p>比较两个文件 找出1不在2中的</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>awk 'NR==FNR{<span class="literal">a</span>[$<span class="number">0</span>]++}NR&gt;FNR{<span class="keyword">if</span>(<span class="literal">a</span>[$<span class="number">0</span>]==<span class="number">0</span>) print}' <span class="number">1</span>.txt <span class="number">2</span>.txt &gt; diff.txt
</pre></td></tr></table></figure>

<p>也可以使用grep来实现
grep -vFf 文件B 文件A  找到A中的没有在B中出现过的
文件大不建议用grep，可能会溢出</p>
<h3 id="11-accesslog-url-">11.通过accesslog整理出用于压力测试的URL列表</h3>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>zcat localhost_access_log<span class="number">.2011</span>-<span class="number">06</span>-<span class="number">20</span> | awk '{a=$<span class="number">0</span>; b=index(a, <span class="string">"GET"</span>); use_get=<span class="number">1</span>; <span class="keyword">if</span>(b==<span class="number">0</span>){ use_get=<span class="number">0</span>; b=index(a,<span class="string">"POST"</span>);}; b=b+(use_get&gt;<span class="number">0</span>?<span class="number">4</span>:<span class="number">5</span>); <span class="keyword">if</span>(b!=<span class="number">0</span>){ e1=index(a,<span class="string">"HTTP/1.0"</span>); <span class="keyword">if</span>(e1 &gt; <span class="number">0</span>) {e = e1}; c=substr(a, b, e-b); print c;}}' &gt; <span class="number">2011</span>-<span class="number">06</span>-<span class="number">20.</span>url
cat <span class="number">2011</span>-<span class="number">06</span>-<span class="number">20.</span>url | awk '{print <span class="string">"http://hotel.qunar.com"</span> $<span class="number">0</span>}' &gt; <span class="number">2011</span>-<span class="number">06</span>-<span class="number">20.</span>url.txt
cat <span class="number">2011</span>-<span class="number">06</span>-<span class="number">20.</span>url.txt | sed -r <span class="attribute">'s</span>/fromDate=((<span class="number">2010</span>-\d{<span class="number">2</span>}-\d{<span class="number">2</span>})|(<span class="number">2011</span>-<span class="number">0</span>[<span class="number">0</span>-<span class="number">5</span>]-\d{<span class="number">2</span>})|(<span class="number">2011</span>-<span class="number">06</span>-[<span class="number">0</span>-<span class="number">1</span>]\d)|(<span class="number">2011</span>-<span class="number">06</span>-<span class="number">2</span>[<span class="number">0</span>-<span class="number">2</span>]))/fromDate=<span class="number">2011</span>-<span class="number">06</span>-<span class="number">23</span>/' |  sed -r <span class="attribute">'s</span>/toDate=((<span class="number">2010</span>-\d{<span class="number">2</span>}-\d{<span class="number">2</span>})|(<span class="number">2011</span>-<span class="number">0</span>[<span class="number">0</span>-<span class="number">5</span>]-\d{<span class="number">2</span>})|(<span class="number">2011</span>-<span class="number">06</span>-[<span class="number">0</span>-<span class="number">1</span>]\d)|(<span class="number">2011</span>-<span class="number">06</span>-<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>]))/toDate=<span class="number">2011</span>-<span class="number">06</span>-<span class="number">24</span>/' &gt; urls<span class="number">.2011</span><span class="number">.06</span><span class="number">.21</span>.txt
</pre></td></tr></table></figure>

<h3 id="12-">12.清理日志</h3>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="shebang">#!/bin/sh</span>
<span class="function"><span class="title">foreachd</span></span>(){
<span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$1</span>/*.<span class="variable">$2</span>
<span class="keyword">do</span>
    <span class="built_in">echo</span> <span class="string">""</span> &gt;  <span class="variable">$file</span>
<span class="keyword">done</span>
}
foreachd <span class="string">"."</span> <span class="string">"log"</span>
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h3 id="1-hotelseq-detail-">1. 通过hotelseq拼detail页链接</h3>
<p>有时我们会从数据库中或者数据分布文件中导出一份儿hotelseq列表，并需要将他们转换成外网detail页的链接，最好的办法是直接在sql里通过数据库提供的字符串函数来做，如果没有在sql里做，那么也可以通过这条awk脚本来做：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>echo <span class="string">"beijing_city_219"</span> | awk '{lastindex=<span class="number">0</span>; idx = <span class="number">0</span>; str = $<span class="number">0</span>; <span class="keyword">while</span>(<span class="number">1</span>){idx = index(str, <span class="string">"_"</span>); <span class="keyword">if</span>(idx==<span class="number">0</span>) <span class="keyword">break</span>; str=substr(str, idx+<span class="number">1</span>); lastindex+=idx;} cityurl = substr($<span class="number">0</span>, <span class="number">1</span>, lastindex-<span class="number">1</span>); seq = substr($<span class="number">0</span>, lastindex+<span class="number">1</span>); print <span class="string">"http://hotel.qunar.com/"</span> cityurl <span class="string">"/dt-"</span> seq }'
</pre></td></tr></table></figure>

<p>另外，使用sed的替换方法也可以完成，命令如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>echo "beijing_city_219" | sed -n '/_/p' | sed -n  's/<span class="command">\(</span>.*<span class="command">\)</span>_<span class="command">\(</span><span class="special">[</span>0-9<span class="special">]</span>*<span class="command">\)</span>*<span class="formula">$/http:<span class="command">\/</span><span class="command">\/</span>hotel.qunar.com<span class="command">\/</span>\1<span class="command">\/</span>dt-\2/gp'</span>
</pre></td></tr></table></figure>

]]></summary>
    
      <category term="Shell" scheme="http://zhaijd.github.io/tags/Shell/"/>
    
      <category term="脚本技术" scheme="http://zhaijd.github.io/categories/%E8%84%9A%E6%9C%AC%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bower 用于web前端开发的包管理器]]></title>
    <link href="http://zhaijd.github.io/2014/02/23/20140223-Bower/"/>
    <id>http://zhaijd.github.io/2014/02/23/20140223-Bower/</id>
    <published>2014-02-23T04:41:47.000Z</published>
    <updated>2014-02-23T04:42:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-">前言</h3>
<p>一个新的web项目开始，我们总是很自然地去下载需要用到的js类库文件，比如jQuery，去官网下载名为jquery-1.10.2.min.js文件，放到我们的项目里。当项目又需要bootstrap的时候，我们会重复刚才的工作，去bootstrap官网下载对应的类库。如果bootstrap所依赖的jQuery并不是1.10.2，而是2.0.3时，我们会再重新下载一个对应版本的jQuery替换原来的。</p>
<p>包管理是个复杂的问题，我们要知道谁依赖谁，还要明确哪个版本依赖哪个版本。这些对于开发人员来说，负担过重了。bower作为一个js依赖管理的工具，提供一种理想包管理方式，借助了npm的一些思想，为我们提供一个舒服的开发环境。</p>
<p>你要还不动起手来试试bower，那你一定不会知道，前端开发是件多么享受的事。</p>
<a id="more"></a>

<p><img src="http://bower.jsbin.cn/img/bower-logo.png" alt="Bower">
目录</p>
<p>bower介绍
bower安装
bower命令
bower使用
用bower提交自己类库</p>
<ol>
<li>bower介绍</li>
</ol>
<p>Bower 是 twitter 推出的一款包管理工具，基于nodejs的模块化思想，把功能分散到各个模块中，让模块和模块之间存在联系，通过 Bower 来管理模块间的这种联系。</p>
<p>包管理工具一般有以下的功能：</p>
<p>注册机制：每个包需要确定一个唯一的 ID 使得搜索和下载的时候能够正确匹配，所以包管理工具需要维护注册信息，可以依赖其他平台。
文件存储：确定文件存放的位置，下载的时候可以找到，当然这个地址在网络上是可访问的。
上传下载：这是工具的主要功能，能提高包使用的便利性。比如想用 jquery 只需要 install 一下就可以了，不用到处找下载。上传并不是必备的，根据文件存储的位置而定，但需要有一定的机制保障。
依赖分析：这也是包管理工具主要解决的问题之一，既然包之间是有联系的，那么下载的时候就需要处理他们之间的依赖。下载一个包的时候也需要下载依赖的包。
功能介绍，摘自文章：<a href="http://chuo.me/2013/02/twitter-bower.html" target="_blank">http://chuo.me/2013/02/twitter-bower.html</a></p>
<ol>
<li>bower安装</li>
</ol>
<p>bower插件是通过npm, Node.js包管理器安装和管理的.</p>
<p>我的系统环境</p>
<p>win7 64bit
Nodejs:v0.10.5
Npm:1.2.19
~ D:\workspace\javascript&gt;node -v
v0.10.5</p>
<p>~ D:\workspace\javascript&gt;npm -v
1.2.19
在系统中，我们已经安装好了Nodejs和npm。win7安装nodejs请参考文章：Nodejs开发框架Express3.0开发手记–从零开始</p>
<p>安装bower 
全局安装bower</p>
<p>~ D:\workspace\javascript&gt;npm install bower -g
新建一个express3的项目nodejs-bower</p>
<p>~ D:\workspace\javascript&gt;express -e nodejs-bower
~ D:\workspace\javascript&gt;cd nodejs-bower &amp;&amp; npm install</p>
<ol>
<li>bower命令</li>
</ol>
<p>bower安装后，我们就可以用bower这个命令了。</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower
Usage:
    bower  [] []
Commands:
    cache                   Manage bower cache
    help                    Display help information about Bower
    home                    Opens a package homepage into your favorite browser
    info                    Info of a particular package
    init                    Interactively create a bower.json file
    install                 Install a package locally
    link                    Symlink a package folder
    list                    List local packages
    lookup                  Look up a package URL by name
    prune                   Removes local extraneous packages
    register                Register a package
    search                  Search for a package by name
    update                  Update a local package
    uninstall               Remove a local package
Options:
    -f, --force             Makes various commands more forceful
    -j, --json              Output consumable JSON
    -l, --log-level         What level of logs to report
    -o, --offline           Do not hit the network
    -q, --quiet             Only output important information
    -s, --silent            Do not output anything, besides errors
    -V, --verbose           Makes output more verbose
    --allow-root            Allows running commands as root
See &#39;bower help &#39; for more information on a specific command.
Commands，列出了bower支持的各种命令。</p>
<p>cache:bower缓存管理
help:显示Bower命令的帮助信息
home:通过浏览器打开一个包的github发布页
info:查看包的信息
init:创建bower.json文件
install:安装包到项目
link:在本地bower库建立一个项目链接
list:列出项目已安装的包
lookup:根据包名查询包的URL
prune:删除项目无关的包
register:注册一个包
search:搜索包
update:更新项目的包
uninstall:删除项目的包</p>
<ol>
<li>bower使用</li>
</ol>
<p>1). 安装jQuery到项目nodejs-bower</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower install jquery
bower jquery#<em>              not-cached git://github.com/components/jquery.git#</em>
bower jquery#<em>                 resolve git://github.com/components/jquery.git#</em>
bower jquery#<em>                download <a href="https://github.com/components/jquery/archive/2.0.3.tar.gz" target="_blank">https://github.com/components/jquery/archive/2.0.3.tar.gz</a>
bower jquery#</em>                 extract archive.tar.gz
bower jquery#*                resolved git://github.com/components/jquery.git#2.0.3
bower jquery#~2.0.3            install jquery#2.0.3</p>
<p>jquery#2.0.3 bower_components\jquery
通过执行命令，我们可以看到jQuery的最新版本被下载，并安装到项目的bower_components\jquery目录</p>
<p>查看bower_components/jquery目录，发现了3个文件。</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;ls bower_components/jquery -a
.  ..  .bower.json  component.json  jquery.js
同样地，我们的项目还需要d3的类库</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower install d3
bower d3#<em>                  not-cached git://github.com/mbostock/d3.git#</em>
bower d3#<em>                     resolve git://github.com/mbostock/d3.git#</em>
bower d3#<em>                    download <a href="https://github.com/mbostock/d3/archive/v3.2.8.tar.gz" target="_blank">https://github.com/mbostock/d3/archive/v3.2.8.tar.gz</a>
bower d3#</em>                     extract archive.tar.gz
bower d3#*                    resolved git://github.com/mbostock/d3.git#3.2.8
bower d3#~3.2.8                install d3#3.2.8</p>
<p>d3#3.2.8 bower_components\d3
非常方便，下载并安装完成！</p>
<p>2). 查看项目中已导入的类库</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower list
bower check-new     Checking for new versions of the project dependencies..
nodejs-bower#0.0.0 D:\workspace\javascript\nodejs-bower
├── d3#3.2.8
└── jquery#2.0.3
3). 安装bootstrap库，并查看依赖情况</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower install bootstrap
bower bootstrap#<em>               cached git://github.com/twbs/bootstrap.git#3.0.0-rc1
bower bootstrap#</em>             validate 3.0.0-rc1 against git://github.com/twbs/bootstrap.git#*
bower jquery#&gt;= 1.9.0           cached git://github.com/components/jquery.git#2.0.3
bower jquery#&gt;= 1.9.0         validate 2.0.3 against git://github.com/components/jquery.git#&gt;= 1.9.0
bower bootstrap#~3.0.0-rc1     install bootstrap#3.0.0-rc1</p>
<p>bootstrap#3.0.0-rc1 bower_components\bootstrap
└── jquery#2.0.3</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower list
bower check-new     Checking for new versions of the project dependencies..
nodejs-bower#0.0.0 D:\workspace\javascript\nodejs-bower
├─┬ bootstrap#3.0.0-rc1 extraneous
│ └── jquery#2.0.3
├── d3#3.2.8
└── jquery#2.0.3
我们发现bootstrap，对jquery是有依赖的。</p>
<p>4). 删除jQuery库，破坏依赖关系</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower uninstall jquery
bower conflict      bootstrap depends on jquery
Continue anyway? (y/n) y
bower uninstall     jquery</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower list
bower check-new     Checking for new versions of the project dependencies..
nodejs-bower#0.0.0 D:\workspace\javascript\nodejs-bower
├─┬ bootstrap#3.0.0-rc1 extraneous
│ └── jquery missing
├── d3#3.2.8
└── jquery missing
5). 安装低版本的jQuery，制造不版本兼容</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower install jquery#1.7.2
bower jquery#~2.0.3             cached git://github.com/components/jquery.git#2.0.3
bower jquery#~2.0.3           validate 2.0.3 against git://github.com/components/jquery.git#~2.0.3
bower jquery#&gt;= 1.9.0           cached git://github.com/components/jquery.git#2.0.3
bower jquery#&gt;= 1.9.0         validate 2.0.3 against git://github.com/components/jquery.git#&gt;= 1.9.0
bower jquery#1.7.2              cached git://github.com/components/jquery.git#1.7.2
bower jquery#1.7.2            validate 1.7.2 against git://github.com/components/jquery.git#1.7.2</p>
<p>Unable to find a suitable version for jquery, please choose one:
    1) jquery#1.7.2 which resolved to 1.7.2
    2) jquery#~2.0.3 which resolved to 2.0.3 and has nodejs-bower as dependants
    3) jquery#&gt;= 1.9.0 which resolved to 2.0.3 and has bootstrap#3.0.0-rc1 as dependants</p>
<p>Prefix the choice with ! to persist it to bower.json</p>
<p>Choice: 1
bower jquery#1.7.2             install jquery#1.7.2</p>
<p>jquery#1.7.2 bower_components\jquery</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower list
bower check-new     Checking for new versions of the project dependencies..
nodejs-bower#0.0.0 D:\workspace\javascript\nodejs-bower
├─┬ bootstrap#3.0.0-rc1 extraneous
│ └── jquery#1.7.2 incompatible with &gt;= 1.9.0 (2.0.3 available)
├── d3#3.2.8
└── jquery#1.7.2 incompatible with ~2.0.3 (2.0.3 available)
我们可以清楚的看到bower，很明确的告诉了我们，jquery和bootstrap是不兼容的，强大之处大家应该有所体会。</p>
<p>6).升级jQuery，让版本兼容</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower update jquery
bower jquery#~2.0.3             cached git://github.com/components/jquery.git#2.0.3
bower jquery#~2.0.3           validate 2.0.3 against git://github.com/components/jquery.git#~2.0.3
bower jquery#&gt;= 1.9.0           cached git://github.com/components/jquery.git#2.0.3
bower jquery#&gt;= 1.9.0         validate 2.0.3 against git://github.com/components/jquery.git#&gt;= 1.9.0
bower jquery#~2.0.3            install jquery#2.0.3</p>
<p>jquery#2.0.3 bower_components\jquery</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower list
bower check-new     Checking for new versions of the project dependencies..
nodejs-bower#0.0.0 D:\workspace\javascript\nodejs-bower
├─┬ bootstrap#3.0.0-rc1 extraneous
│ └── jquery#2.0.3
├── d3#3.2.8
└── jquery#2.0.3
多么智能，一键搞定，这才是高效的开发。</p>
<p>7). 查看本地bower已经缓存的类库</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower cache list
bootstrap=git://github.com/twbs/bootstrap.git#3.0.0-rc1
d3=git://github.com/mbostock/d3.git#3.2.8
jquery=git://github.com/components/jquery.git#1.7.2
jquery=git://github.com/components/jquery.git#2.0.3
8). 查看D3库信息</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower info d3
d3</p>
<p>  Versions:</p>
<pre><code>- 3.2.8
- 3.2.7
- 3.2.6
- 3.2.5
- 3.2.4
- 3.2.3
...
</code></pre><p>9). 查看dojo库的url</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower lookup dojo
dojo git://github.com/dojo/dojo.git
10). 用浏览器打开dojo的发布主页</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower home dojo
bower dojo#<em>                not-cached git://github.com/dojo/dojo.git#</em>
bower dojo#<em>                   resolve git://github.com/dojo/dojo.git#</em>
bower dojo#<em>                  download <a href="https://github.com/dojo/dojo/archive/1.9.1.tar.gz" target="_blank">https://github.com/dojo/dojo/archive/1.9.1.tar.gz</a>
bower dojo#</em>                   extract archive.tar.gz
bower dojo#*                  resolved git://github.com/dojo/dojo.git#1.9.1
浏览器自动打开：<a href="https://github.com/dojo/dojo" target="_blank">https://github.com/dojo/dojo</a></p>
<p>11). 查询包含dojo的类库</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower search dojo
Search results:</p>
<pre><code>dojo git://github.com/dojo/dojo.git
dojox git://github.com/dojo/dojox.git
dojo-util git://github.com/dojo/util.git
dojo-bootstrap git://github.com/samvdb/Dojo-Bootstrap
</code></pre><p>真是方便实用的技术。</p>
<ol>
<li>用bower提交自己类库</li>
</ol>
<p>1). 生成bower.json配置文件</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower init
bower existing      The existing bower.json file will be used and filled in
[?] name: nodejs-bower
[?] version: 0.0.0
[?] main file:
[?] set currently installed components as dependencies? No
[?] add commonly ignored files to ignore list? Yes
查看生成的文件bower.json</p>
<p>{
  &quot;name&quot;: &quot;nodejs-bower&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;ignore&quot;: [
    &quot;<em>*/.</em>&quot;,
    &quot;node_modules&quot;,
    &quot;bower_components&quot;,
    &quot;test&quot;,
    &quot;tests&quot;
  ],
  &quot;dependencies&quot;: {
    &quot;d3&quot;: &quot;git://github.com/mbostock/d3.git#~3.2.8&quot;,
    &quot;jquery&quot;: &quot;git://github.com/components/jquery.git#~2.0.3&quot;
  }
}
2). 在github创建一个资源库：nodejs-bower
3). 本地工程绑定github</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;git init
Initialized empty Git repository in D:/workspace/javascript/nodejs-bower/.git/</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;git add .
~ D:\workspace\javascript\nodejs-bower&gt;git commit -m &quot;first commit&quot;</p>
<h1 id="on-branch-master">On branch master</h1>
<p>#</p>
<h1 id="initial-commit">Initial commit</h1>
<p>#</p>
<h1 id="untracked-files-">Untracked files:</h1>
<h1 id="-use-git-add-to-include-in-what-will-be-committed-">(use &quot;git add ...&quot; to include in what will be committed)</h1>
<p>#</p>
<h1 id="app-js">app.js</h1>
<h1 id="bower-json">bower.json</h1>
<h1 id="bower_components-">bower_components/</h1>
<h1 id="node_modules-">node_modules/</h1>
<h1 id="package-json">package.json</h1>
<h1 id="public-">public/</h1>
<h1 id="routes-">routes/</h1>
<h1 id="views-">views/</h1>
<p>nothing added to commit but untracked files present (use &quot;git add&quot; to track)</p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;git remote add origin <a href="https://github.com/bsspirit/nodejs-bower" target="_blank">https://github.com/bsspirit/nodejs-bower</a></p>
<p>~ D:\workspace\javascript\nodejs-bower&gt;git push -u origin master
Counting objects: 565, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (516/516), done.
Writing objects: 100% (565/565), 803.08 KiB, done.
Total 565 (delta 26), reused 0 (delta 0)
To <a href="https://github.com/bsspirit/nodejs-bower" target="_blank">https://github.com/bsspirit/nodejs-bower</a></p>
<ul>
<li>[new branch]      master -&gt; master
Branch master set up to track remote branch master from origin.
4). 注册到bower官方类库</li>
</ul>
<p>~ D:\workspace\javascript\nodejs-bower&gt;bower register nodejs-bower git@github.com:bsspirit/nodejs-bower.git
bower                          convert Converted git@github.com:bsspirit/nodejs-bower.git to git://github.com/bsspirit/n
odejs-bower.git
bower nodejs-bower#<em>           resolve git://github.com/bsspirit/nodejs-bower.git#</em>
bower nodejs-bower#<em>          checkout master
bower nodejs-bower#</em>          resolved git://github.com/bsspirit/nodejs-bower.git#af3ceaac07
Registering a package will make it visible and installable via the registry (<a href="https://bower.herokuapp.com" target="_blank">https://bower.herokuapp.com</a>), continue? (y/
n)                    y
bower nodejs-bower            register git://github.com/bsspirit/nodejs-bower.git</p>
<p>Package nodejs-bower registered successfully!
All valid semver tags on git://github.com/bsspirit/nodejs-bower.git will be available as versions.
To publish a new version, you just need release a valid semver tag.</p>
<p>Run bower info nodejs-bower to list the package versions.
5). 查询我们自己的包</p>
<p>D:\workspace\javascript\nodejs-bower&gt;bower search nodejs-bower
Search results:</p>
<pre><code>nodejs-bower git://github.com/bsspirit/nodejs-bower.git
</code></pre><p>6). 安装我们自己的包</p>
<p>D:\workspace\javascript\nodejs-bower&gt;bower install nodejs-bower
bower nodejs-bower#<em>            cached git://github.com/bsspirit/nodejs-bower.git#af3ceaac07
bower nodejs-bower#</em>          validate af3ceaac07 against git://github.com/bsspirit/nodejs-bower.git#<em>
bower nodejs-bower#</em>           install nodejs-bower#af3ceaac07</p>
<p>nodejs-bower#af3ceaac07 bower_components\nodejs-bower
├── d3#3.2.8
└── jquery#2.0.3
其实模块化，版本依赖，开发类库，发布类库，安装类库，都是一条命令！还能再简单一点么！快把项目模块化，然后分享给大家吧！！未来是属于开发者的。</p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="-">前言</h3>
<p>一个新的web项目开始，我们总是很自然地去下载需要用到的js类库文件，比如jQuery，去官网下载名为jquery-1.10.2.min.js文件，放到我们的项目里。当项目又需要bootstrap的时候，我们会重复刚才的工作，去bootstrap官网下载对应的类库。如果bootstrap所依赖的jQuery并不是1.10.2，而是2.0.3时，我们会再重新下载一个对应版本的jQuery替换原来的。</p>
<p>包管理是个复杂的问题，我们要知道谁依赖谁，还要明确哪个版本依赖哪个版本。这些对于开发人员来说，负担过重了。bower作为一个js依赖管理的工具，提供一种理想包管理方式，借助了npm的一些思想，为我们提供一个舒服的开发环境。</p>
<p>你要还不动起手来试试bower，那你一定不会知道，前端开发是件多么享受的事。</p>
]]></summary>
    
      <category term="javascript" scheme="http://zhaijd.github.io/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://zhaijd.github.io/tags/nodejs/"/>
    
      <category term="Nodejs" scheme="http://zhaijd.github.io/categories/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[感冒一周了，带血的浓痰，这是怎么了]]></title>
    <link href="http://zhaijd.github.io/2014/02/22/20140220-%E6%84%9F%E5%86%92%E4%B8%A5%E9%87%8D/"/>
    <id>http://zhaijd.github.io/2014/02/22/20140220-感冒严重/</id>
    <published>2014-02-22T04:54:30.000Z</published>
    <updated>2014-02-23T04:11:56.000Z</updated>
    <content type="html"><![CDATA[<p>在家过年的时候，每天家里的空气都是严重的雾霾，但是家里面的人对于那样子的天气早已习以为常，
并且已经麻木了，我不停的跟家里人说，帝都入冬以来空气质量非常不错，每天都是湛蓝的天，</p>
]]></content>
    
    
      <category term="感冒" scheme="http://zhaijd.github.io/tags/%E6%84%9F%E5%86%92/"/>
    
      <category term="生活琐事" scheme="http://zhaijd.github.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[华夏银行卡密码试了三次，锁卡了]]></title>
    <link href="http://zhaijd.github.io/2014/02/22/20140221-%E5%8D%8E%E5%A4%8F%E9%93%B6%E8%A1%8C/"/>
    <id>http://zhaijd.github.io/2014/02/22/20140221-华夏银行/</id>
    <published>2014-02-21T18:38:50.000Z</published>
    <updated>2014-02-21T18:39:15.000Z</updated>
    <content type="html"><![CDATA[<p><div class="container">
      <div class="row">
        <div class="col-md-4"><img src="/images/2014-02-21-01.jpg" alt="..." class="img-rounded"></div>
        <div class="col-md-4">华夏银行 ETC速通卡绑定的信用卡今天看到年费竟然680，我记得我去年没有刷什么卡。不知道年费有没有免，于是想通过网络银行看看，mac上面注册不支持浏览器，超级郁闷，好在还有一个手机客户端，折腾来折腾去，终于注册上去了，但是我的诉求并没有被满足，结果密码还连续输错3次，我以为第二天就会解冻，没有想到超级变态的是需要本人到银行办理，崩溃啊。。。</div>
      </div>
</div> <!-- /container --></p>
]]></content>
    
    
      <category term="华夏银行" scheme="http://zhaijd.github.io/tags/%E5%8D%8E%E5%A4%8F%E9%93%B6%E8%A1%8C/"/>
    
      <category term="生活琐事" scheme="http://zhaijd.github.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sublime 使用技巧]]></title>
    <link href="http://zhaijd.github.io/2014/02/21/sublime_markdown/"/>
    <id>http://zhaijd.github.io/2014/02/21/sublime_markdown/</id>
    <published>2014-02-21T15:22:31.000Z</published>
    <updated>2014-02-21T15:22:49.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><h3 id="-">失焦自动保存</h3>
<p>在全局配置中增加配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>    <span class="string">"save_on_focus_lost"</span>: <span class="literal">true</span>
</pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><h3 id="-package-control-">安装 Package Control 插件</h3>
<p>使用下面的命令调出Console</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>    <span class="command"><span class="keyword">command</span>+\`</span>
</pre></td></tr></table></figure>

<p>输入下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>    import urllib2,os; pf=<span class="string">'Package Control.sublime-package'</span>; 
    ipp=sublime.installed_packages_path(); 
    os.makedirs(ipp) <span class="keyword">if</span> <span class="keyword">not</span> os.path.<span class="keyword">exists</span>(ipp) <span class="keyword">else</span> None; 
    urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); 
    <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(ipp,pf),<span class="string">'wb'</span>).<span class="keyword">write</span>
    (urllib2.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">' '</span>)).<span class="keyword">read</span>()); 
    <span class="keyword">print</span> <span class="string">'Please restart Sublime Text to finish installation'</span>
</pre></td></tr></table></figure>

<p>重启Sublime 即可。以后安装其他插件 则使用 Cmd + Shift + P  调用出命令窗口，输入PCIP，然后搜索响应的插件名称即可。</p>
</li>
<li><h3 id="markdown-">MarkDown 插件支持</h3>
<p><a href="https://github.com/ttscoff/MarkdownEditing" target="_blank">MarkdownEditing</a> </p>
<h4 id="-">功能介绍：</h4>
<ul>
<li>语法增强类 星号*、下划线_和反引号`自动配对</li>
<li>如输入的自动配对符号中间内容为空时，删除第一个符号时将直接删除整对符号</li>
<li>如输入自动配对符号后直接输入空格，则自动删除后面自动配对的符号</li>
<li>波浪线 ~ 包围的内容将转换为HTML中的 <del></del> 标签</li>
<li>当创建了列表后，回车将自动添加一个列表项。如列表项为空，再次回车将删除该列表项</li>
</ul>
<h4 id="-">快捷键支持：</h4>
<blockquote>
<p>MarkdownEditing在Windows下面的快捷键需要自行根据Default (OSX).sublime-keymap中的内容进行修改，添加到Default (Windows).sublime-keymap中。</p>
</blockquote>
<ul>
<li><code>Option+Cmd+V</code> 选中的内容将自动转换为行内式超链接，链接到剪贴板中的内容</li>
<li><code>Option+Cmd+R</code> 选中的内容将自动转换为参考式超链接，链接到剪贴板中的内容</li>
<li><code>Ctrl+Cmd+R</code> 弹出提示框插入一个参考式超链接，在提示框中输入链接内容和定义参考ID[^3]</li>
<li><code>Option+cmd+K</code> 插入一个标准的行内式超链接</li>
<li><code>Cmd+Shift+K</code> 插入一个标准的行内式图片（此快捷键可能与输入法有冲突）</li>
<li><code>Ctrl+Cmd+1</code> 至 <code>Ctrl+Cmd+6</code> 插入一级至六级标题</li>
<li><code>Option+Cmd+i</code> 选中的内容转换为斜体</li>
<li><code>Option+Cmd+b</code> 选中的内容转换为粗体    </li>
<li><code>Alt+Shift+G</code> 查找没有定义的参考式超链接并自动添加其定义链接</li>
<li><code>Cmd+Shift+.</code> 缩进当前内容</li>
<li><code>Cmd+Shift+,</code> 提前当前内容</li>
</ul>
<p>关于脚注的功能，hexo 暂不支持</p>
<blockquote>
<ul>
<li><code>Cmd+Shift+6</code> 自动插入一个脚注，并跳转到该脚注的定义中。</li>
<li><code>Option+Shift+F</code> 查找没有定义的脚注并自动添加其定义链接</li>
<li><code>Ctrl+Alt+S</code> 脚注排序</li>
</ul>
</blockquote>
</li>
<li><h3 id="-">未完待续。。。</h3>
</li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<ol>
<li><h3 id="-">失焦自动保存</h3>
<p>在全局配置中增加配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>    <span class="string">"save_on_focus_lost"</span>: <span class="literal">true</span>
</pre></td></tr></table></figure>

]]></summary>
    
      <category term="sublime" scheme="http://zhaijd.github.io/tags/sublime/"/>
    
      <category term="markdown" scheme="http://zhaijd.github.io/tags/markdown/"/>
    
      <category term="技术杂项" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将hexo bloger的源码托管到GitHub]]></title>
    <link href="http://zhaijd.github.io/2014/02/21/%E6%89%98%E7%AE%A1bloger%E6%BA%90%E7%A0%81/"/>
    <id>http://zhaijd.github.io/2014/02/21/托管bloger源码/</id>
    <published>2014-02-20T17:34:00.000Z</published>
    <updated>2014-02-21T16:08:32.000Z</updated>
    <content type="html"><![CDATA[<p>hexo 生成的静态文件托管的github 的文章有很多文章介绍，但是我希望我将整个blog的源码都托管到github上面，经过自己的尝试，记录如下：</p>
<ul>
<li>创建一个新的代码仓库。</li>
<li>在<code>hexo bloger</code> 根目录，输入 <code>git init</code></li>
<li>使用如下命令：<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>git remote add origin <span class="link_url">https://</span>[<span class="link_label">地址</span>]/zhaijidi/source.git
git push -u source master
</pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    
      <category term="githuh" scheme="http://zhaijd.github.io/tags/githuh/"/>
    
      <category term="hexo" scheme="http://zhaijd.github.io/tags/hexo/"/>
    
      <category term="技术杂项" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开篇辟地纪念]]></title>
    <link href="http://zhaijd.github.io/2014/02/20/first/"/>
    <id>http://zhaijd.github.io/2014/02/20/first/</id>
    <published>2014-02-20T08:48:40.000Z</published>
    <updated>2014-02-21T04:42:00.000Z</updated>
    <content type="html"><![CDATA[<p>使用<code>MarkDown</code>在本地写自己的<code>Blogger</code>，并且托管到github与大家分享，貌似是一件<code>so cool</code>的事情，我一直也想体验下，按照网上的说法大部分都是基于Ruby的，之前折腾过，首先没有想深入的学习Ruby，其实之前部署环境的时候吃过苦头，所以坚决不选用Ruby的东东，庆幸的是备选方案还是挺多的，对比了几番后，最终选择基于<code>nodejs</code> 环境搭建的框架<a href="http://zespia.tw/hexo" target="_blank"><code>Hexo</code></a> 。
<a id="more"></a></p>
<p>有三点原因：</p>
<ul>
<li>支持MarkDown 语法，可以托管到GitHub，个是硬性指标。</li>
<li>基于Nodejs环境，一直想深入的学习Nodejs，正好可以练手。</li>
<li>傻瓜式的安装部署，很方便就在本地搞定了。</li>
</ul>
<p>经过一番努力，各种的未知问题的折腾，终于搞定，看起来也像个样子，特发此文纪念一番。</p>
]]></content>
    <summary type="html"><![CDATA[<p>使用<code>MarkDown</code>在本地写自己的<code>Blogger</code>，并且托管到github与大家分享，貌似是一件<code>so cool</code>的事情，我一直也想体验下，按照网上的说法大部分都是基于Ruby的，之前折腾过，首先没有想深入的学习Ruby，其实之前部署环境的时候吃过苦头，所以坚决不选用Ruby的东东，庆幸的是备选方案还是挺多的，对比了几番后，最终选择基于<code>nodejs</code> 环境搭建的框架<a href="http://zespia.tw/hexo" target="_blank"><code>Hexo</code></a> 。
]]></summary>
    
      <category term="hexo" scheme="http://zhaijd.github.io/tags/hexo/"/>
    
      <category term="nodejs" scheme="http://zhaijd.github.io/tags/nodejs/"/>
    
      <category term="markdown" scheme="http://zhaijd.github.io/tags/markdown/"/>
    
      <category term="mou" scheme="http://zhaijd.github.io/tags/mou/"/>
    
      <category term="生活琐事" scheme="http://zhaijd.github.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mou 使用帮助]]></title>
    <link href="http://zhaijd.github.io/2014/02/20/mou/"/>
    <id>http://zhaijd.github.io/2014/02/20/mou/</id>
    <published>2014-02-19T20:37:00.000Z</published>
    <updated>2014-02-21T18:45:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="mou">Mou</h1>
<p><img src="http://mouapp.com/Mou_128.png" alt="Mou icon"></p>
<h3 id="shortcuts-">Shortcuts 快捷键</h3>
<h4 id="view">View</h4>
<ul>
<li>Toggle live preview（<code>显示或隐藏预览</code>）: Shift + Cmd + I</li>
<li>Toggle Words Counter（<code>显示字符数</code>）: Shift + Cmd + W</li>
<li>Toggle Transparent（<code>窗口透明</code>）: Shift + Cmd + T</li>
<li>Toggle Floating: Shift + Cmd + F</li>
<li>Left/Right = 1/1（<code>编辑和预览窗口分屏比例</code>）: Cmd + 0</li>
<li>Left/Right = 3/1（<code>编辑和预览窗口分屏比例</code>）: Cmd + +</li>
<li>Left/Right = 1/3（<code>编辑和预览窗口分屏比例</code>）: Cmd + -</li>
<li>Toggle Writing orientation（<code>文字方向</code>）: Cmd + L</li>
<li>Toggle fullscreen（<code>全屏</code>）: Control + Cmd + F</li>
</ul>
<a id="more"></a>

<h4 id="actions">Actions</h4>
<ul>
<li>Copy HTML（<code>拷贝HTML</code>）: Option + Cmd + C</li>
<li>Strong（<strong><em><code>加粗</code></em></strong>）: Select text, Cmd + B</li>
<li>Emphasize（<em><code>斜体</code></em>）: Select text, Cmd + I</li>
<li>Inline Code（<code>着色</code>）: Select text, Cmd + K</li>
<li>Strikethrough（<del><code>删除线</code></del>）: Select text, Cmd + U</li>
<li>Link（<code>插入超链接</code>）: Select text, Control + Shift + L</li>
<li>Image（<code>插入图片</code>）: Select text, Control + Shift + I</li>
<li>Select Word（<code>选中当前字符</code>）: Control + Option + W</li>
<li>Select Line（<code>选中当前行</code>）: Shift + Cmd + L</li>
<li>Select All（<code>全选</code>）: Cmd + A</li>
<li>Deselect All（<code>取消选中</code>）: Cmd + D</li>
<li>Convert to Uppercase（<code>选中字符变大写</code>）: Select text, Control + U</li>
<li>Convert to Lowercase（<code>选中字符变小写</code>）: Select text, Control + Shift + U</li>
<li>Convert To Titlecase: Select Text, Control + Option + U</li>
<li>Convert to List（<code>选中行变成list</code>）: Select lines, Control + L</li>
<li>Convert to Blockquote（<code>选中行变成引用</code>）: Select lines, Control + Q</li>
<li>Convert to H1（<code>变为H1</code>）: Cmd + 1</li>
<li>Convert to H2（<code>变为H2</code>）: Cmd + 2</li>
<li>Convert to H3（<code>变为H3</code>）: Cmd + 3</li>
<li>Convert to H4（<code>变为H4</code>）: Cmd + 4</li>
<li>Convert to H5（<code>变为H5</code>）: Cmd + 5</li>
<li>Convert to H6（<code>变为H6</code>）: Cmd + 6</li>
<li>Convert Spaces to Tabs(<code>插入tab</code>): Control + [</li>
<li>Convert Tabs to Spaces（<code>删除tab</code>）: Control + ]</li>
<li>Insert Current Date（<code>插入当前日期</code>）: Control + Shift + 1</li>
<li>Insert Current Time（<code>插入当前时间</code>）: Control + Shift + 2</li>
<li>Insert entity &lt;（<code>插入&amp;lt;</code>）: Control + Shift + ,</li>
<li>Insert entity &gt;（<code>插入&amp;gt;</code>）: Control + Shift + .</li>
<li>Insert entity &amp;（<code>插入&amp;amp;</code>）: Control + Shift + 7</li>
<li>Insert entity Space: Control + Shift + Space</li>
<li>Insert Scriptogr.am Header（<code>插入Scriptogr.am文件头信息</code>）: Control + Shift + G</li>
<li>Shift Line Left（<code>选中行右移</code>）: Select lines, Cmd + [</li>
<li>Shift Line Right（<code>选中行左移</code>）: Select lines, Cmd + ]</li>
<li>New Line（<code>插入新行</code>）: Cmd + Return</li>
<li>Comment（<code>插入注释</code>）: Cmd + /</li>
<li>Hard Linebreak（<code>插入换行符</code>）: Control + Return</li>
</ul>
<h4 id="edit">Edit</h4>
<ul>
<li>Auto complete current word（<code>自动补全</code>）: Esc</li>
<li>Find（<code>查找</code>）: Cmd + F</li>
<li>Close find bar（<code>关闭查找</code>）: Esc</li>
</ul>
<h4 id="post">Post</h4>
<ul>
<li>Post on Scriptogr.am: Control + Shift + S</li>
<li>Post on Tumblr: Control + Shift + T</li>
</ul>
<h4 id="export">Export</h4>
<ul>
<li>Export HTML（<code>导出HTML</code>）: Option + Cmd + E</li>
<li>Export PDF（<code>导出PDF</code>）:  Option + Cmd + P</li>
</ul>
<h3 id="and-more-">And more?</h3>
<p>Don&#39;t forget to check Preferences, lots of useful options are there.</p>
<p>Follow <a href="http://twitter.com/chenluois" target="_blank">@chenluois</a> on Twitter for the latest news.</p>
<p>For feedback, use the menu <code>Help</code> - <code>Send Feedback</code></p>
<h2 id="overview">Overview</h2>
<p><strong>Mou</strong>, the missing Markdown editor for <em>web developers</em>.</p>
<h3 id="syntax">Syntax</h3>
<h4 id="strong-and-emphasize">Strong and Emphasize</h4>
<p><strong>strong</strong> or <strong>strong</strong> ( Cmd + B )</p>
<p><em>emphasize</em> or <em>emphasize</em> ( Cmd + I )</p>
<p><strong>Sometimes I want a lot of text to be bold.
Like, seriously, a <em>LOT</em> of text</strong></p>
<h4 id="blockquotes">Blockquotes</h4>
<blockquote>
<p>Right angle brackets &gt; are used for block quotes.</p>
</blockquote>
<h4 id="links-and-email">Links and Email</h4>
<p>An email <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#109;">&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#109;</a> link.</p>
<p>Simple inline link <a href="http://chenluois.com" target="_blank">http://chenluois.com</a>, another inline link <a href="http://smallerapp.com" target="_blank">Smaller</a>, one more inline link with title <a href="http://resizesafari.com" title="a Safari extension" target="_blank">Resize</a>.</p>
<p>A <a href="http://mouapp.com" title="Markdown editor on Mac OS X" target="_blank">reference style</a> link. Input id, then anywhere in the doc, define the link with corresponding id:</p>
<p>Titles ( or called tool tips ) in the links are optional.</p>
<h4 id="images">Images</h4>
<p>An inline image <img src="http://smallerapp.com/favicon.ico" alt="Smaller icon" title="Title here">, title is optional.</p>
<p>A <img src="http://resizesafari.com/favicon.ico" alt="Resize icon" title="Title"> reference style image.</p>
<h4 id="inline-code-and-block-code">Inline code and Block code</h4>
<p>Inline code are surround by <code>backtick</code> key. To create a block code:</p>
<pre><code>Indent each line by at least 1 tab, or 4 spaces.
var Mou = exactlyTheAppIwant; 
</code></pre><h4 id="ordered-lists">Ordered Lists</h4>
<p>Ordered lists are created using &quot;1.&quot; + Space:</p>
<ol>
<li>Ordered list item</li>
<li>Ordered list item</li>
<li>Ordered list item</li>
</ol>
<h4 id="unordered-lists">Unordered Lists</h4>
<p>Unordered list are created using &quot;*&quot; + Space:</p>
<ul>
<li>Unordered list item</li>
<li>Unordered list item</li>
<li>Unordered list item </li>
</ul>
<p>Or using &quot;-&quot; + Space:</p>
<ul>
<li>Unordered list item</li>
<li>Unordered list item</li>
<li>Unordered list item</li>
</ul>
<h4 id="hard-linebreak">Hard Linebreak</h4>
<p>End a line with two or more spaces will create a hard linebreak, called <code>&lt;br /&gt;</code> in HTML. ( Control + Return )<br>Above line ended with 2 spaces.</p>
<h4 id="horizontal-rules">Horizontal Rules</h4>
<p>Three or more asterisks or dashes:</p>
<hr>
<hr>
<hr>
<h4 id="headers">Headers</h4>
<p>Setext-style:</p>
<h1 id="this-is-h1">This is H1</h1>
<h2 id="this-is-h2">This is H2</h2>
<p>atx-style:</p>
<h1 id="this-is-h1">This is H1</h1>
<h2 id="this-is-h2">This is H2</h2>
<h3 id="this-is-h3">This is H3</h3>
<h4 id="this-is-h4">This is H4</h4>
<h5 id="this-is-h5">This is H5</h5>
<h6 id="this-is-h6">This is H6</h6>
<h3 id="extra-syntax">Extra Syntax</h3>
<h4 id="footnotes">Footnotes</h4>
<p>Footnotes work mostly like reference-style links. A footnote is made of two things: a marker in the text that will become a superscript number; a footnote definition that will be placed in a list of footnotes at the end of the document. A footnote looks like this:</p>
<p>That&#39;s some text with a footnote.[^1]</p>
<p>[^1]: And that&#39;s the footnote.</p>
<h4 id="strikethrough">Strikethrough</h4>
<p>Wrap with 2 tilde characters:</p>
<p><del>Strikethrough</del></p>
<h4 id="fenced-code-blocks">Fenced Code Blocks</h4>
<p>Start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>Fenced code blocks are like Stardard Markdown’s regular code
blocks, except <span class="keyword">that</span> they’re <span class="keyword">not</span> indented <span class="keyword">and</span> instead rely <span class="function_start"><span class="keyword">on</span></span>
a start <span class="keyword">and</span> <span class="keyword">end</span> fence lines <span class="keyword">to</span> delimit <span class="keyword">the</span> code block.
</pre></td></tr></table></figure>

<h4 id="tables">Tables</h4>
<p>A simple table looks like this:</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>If you wish, you can add a leading and tailing pipe to each line of the table:</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>Specify alignement for each column by adding colons to separator lines:</p>
<table>
<thead>
<tr>
<th style="text-align:left">First Header</th>
<th style="text-align:center">Second Header</th>
<th style="text-align:right">Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:left">Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html"><![CDATA[<h1 id="mou">Mou</h1>
<p><img src="http://mouapp.com/Mou_128.png" alt="Mou icon"></p>
<h3 id="shortcuts-">Shortcuts 快捷键</h3>
<h4 id="view">View</h4>
<ul>
<li>Toggle live preview（<code>显示或隐藏预览</code>）: Shift + Cmd + I</li>
<li>Toggle Words Counter（<code>显示字符数</code>）: Shift + Cmd + W</li>
<li>Toggle Transparent（<code>窗口透明</code>）: Shift + Cmd + T</li>
<li>Toggle Floating: Shift + Cmd + F</li>
<li>Left/Right = 1/1（<code>编辑和预览窗口分屏比例</code>）: Cmd + 0</li>
<li>Left/Right = 3/1（<code>编辑和预览窗口分屏比例</code>）: Cmd + +</li>
<li>Left/Right = 1/3（<code>编辑和预览窗口分屏比例</code>）: Cmd + -</li>
<li>Toggle Writing orientation（<code>文字方向</code>）: Cmd + L</li>
<li>Toggle fullscreen（<code>全屏</code>）: Control + Cmd + F</li>
</ul>
]]></summary>
    
      <category term="Mou" scheme="http://zhaijd.github.io/tags/Mou/"/>
    
      <category term="Markdown" scheme="http://zhaijd.github.io/tags/Markdown/"/>
    
      <category term="技术杂项" scheme="http://zhaijd.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
</feed>
